<div data-controller="tradesessionprofit" class="traderun-container">
    <div id="charContent"></div>

    <div class="main-menu trade-session"  data-traderun-target="newTradeSession">
    Profit Distribution: <%=  TradeSession.find_by_id(@current_task.state.split("-").last).session_date %>




    <svg id="svgCanvas" width="500" height="500">
    <!-- Black Triangle -->
    <polygon id="blackTriangle" points="100,400 400,400 250,100" fill="black"/>
    <!-- Red Square -->
    <rect id="redSquare" x="250" y="300" width="20" height="20" fill="red" />
  </svg>
  

<div class="data" style="text-align:right;">
Profit: <%= TradeSession.find_by_id(@current_task.state.split("-").last).total_profit %>
SCU: <%= TradeSession.find_by_id(@current_task.state.split("-").last).total_scu %>
</div>


    </div>
    <%= render '/trade123/footer_menu' %>
</div>
<style>
#charContent{
  width:100%;
  height:100vh;
  display:block;    
  position:absolute;
  color:darkblue;
  font-family:monospace;
  top:0px;
  left:0px;
  z-index:0;
}
#traderun_footer{
  display:block !important;
}
.trade-session ul{
  list-style:none;
}
.corner-data{
    display:flex;
}
#shell .corner-data input{
background-color:transparent;
}
    .profit-triangle {
      position: absolute;
      width: 400px;
      height: 400px;
      top: 0px;
      left: 0px;
    }

    .draggable {
      position: absolute;
      width: 20px;
      height: 20px;
      background-color: red;
      cursor: move;
      user-select: none;
    }
.main-menu{
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    height:300px;
    width: 80vw;
    z-index: 2; 
    background-color:#b3b3b3;
    font-family: 'dos';
    font-size:1.6rem;
    box-shadow:
    inset 0 0 0 3px #b3b3b3, /* Change #000 to your desired inner border color */
    inset 0 0 0 6px black, /* Change #fff to match the background color */
    inset 0 0 0 7px #b3b3b3,
    inset 0 0 0 10px black; /* Change #fff to match the background color */
    padding:14px 14px;
    display:flex;
}
/*
.tradesessionprofit {
    position: relative;
    width: 0;
    height: 0;
    border-left: 150px solid transparent;
    border-right: 150px solid transparent;
    border-bottom: 260px solid #ccc;
}
*/

.drag-container {
  position: relative;
  width: 250px;
  height: 250px;
}

.triangle {
  position: absolute;
  width: 0;
  height: 0;
  border-left: 125px solid transparent;
  border-right: 125px solid transparent;
  border-bottom: 250px solid transparent;
  border-top: none;
  border-left-color: transparent;
  border-right-color: transparent;
  border-bottom-color: transparent;
  border-style: solid;
  border-width: 125px 125px 250px;
  box-sizing: border-box;
}

.triangle::before {
  content: "";
  position: absolute;
  top: -2px;
  left: -125px;
  width: 0;
  height: 0;
  border-left: 127px solid transparent;
  border-right: 127px solid transparent;
  border-bottom: 252px solid transparent;
  border-top: none;
  border-left-color: transparent;
  border-right-color: transparent;
  border-bottom-color: black;
  border-style: solid;
  border-width: 127px 127px 252px;
  z-index: -1;
}

.square {
  position: absolute;
  user-drag: none;
  width: 50px;
  height: 50px;
  background-color: red;
  left: 100px;
  top: 0;
  cursor: pointer;
}

</style>

<script>
import * as d3 from "d3";

let svgCanvas = d3.select("#svgCanvas");
let redSquare = d3.select("#redSquare");
let triangle = d3.select("#blackTriangle");

// Define drag behavior
let drag = d3.drag()
  .on("start", dragstarted)
  .on("drag", dragged)
  .on("end", dragended);

redSquare.call(drag);

// Define drag handlers
function dragstarted(event) {
  d3.select(this).raise();
}

function dragged(event, d) {
  // Update position
  let newX = event.x;
  let newY = event.y;

  // Check if the new position is within the triangle
  // Use a function that calculates if a point is within a triangle
  if (isInsideTriangle(newX, newY)) {
    // Save the square's position in local storage
    localStorage.setItem("squareX", newX);
    localStorage.setItem("squareY", newY);

    d3.select(this)
      .attr("x", newX - 10) // the offset is to put the cursor in the middle of the square
      .attr("y", newY - 10);
  }
}

function dragended(event) {
  // Do something when drag ends if necessary
}

// Function to check if point is within triangle
// This is a simplified version and will depend on your actual triangle points
// You might need a more robust version for a non-equilateral triangle
function isInsideTriangle(x, y) {
  let withinX = (x >= 100 && x <= 400); // the range of x-coordinates of the triangle
  let withinY = (y >= 100 && y <= 400); // the range of y-coordinates of the triangle
  return withinX && withinY;
}

</script>