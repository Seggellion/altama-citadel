c
capital
c
[buy_commodity.maxInventory, total_units].min
Commodity.find_by_id(351).update(maxInventory:60)
actual_removed
buy_commodity.sell
capital
c
@active_commodities.search_by_name_and_location(buy_search_query).where('sell > ?', 0).first.inventory
@active_commodities.search_by_name_and_location(buy_search_query).where('sell > ?', 0).first
buy_commodity.inventory
buy_commodity
buy_commodity.inventory > 0
c
Commodity.find_by_id(351).update(inventory:60)
@active_commodities.search_by_name_and_location(buy_search_query).where('sell > ?', 0)
sell_commodity
buy_commodity
c
Commodity.search_by_name_and_location(buy_search_query)
sell_commodity.buy.to_i
records_exist = buy_commodity.present? && sell_commodity.present?
buy_commodity.present?
sell_commodity.present?
c
sell_commodity.present?
sell_commodity
c
sell_commodity.present?
sell_commodit.present?
sell_search_query
sell_commodity
c
buy_commodity
c
active_tasks.state.split(',')
active_tasks = @all_tasks.find_by(state: params[:window])
@all_tasks.find_by(state: params[:window])
@all_tasks.find_by(name: params[:window])
params[:window]
@all_tasks
active_task
c
windows.find_by(params[:window])
windows = active_task.state.split(',')
active_task.state.split(',')
active_task.state
active_task
params[:window]
active_task
c
Commodity.where(active:nil).update(active:true)
Commodity.last
 @active_commodities
buy_commodity
params
c
capital
c
total_units
starbits
capital
c
capital <= starbits
capital
c
task
buy_commodity
buy_commodity.sell.to_i
capital
c
@secretguid
c
 Task.all.detect { |task| task_name.include?(task.name) }
task_name = task
 Task.all.detect { |task| task_name.include?(task.name) }
task
Task.all.detect { |task| task.include?(task.name) }
Task.all.detect { |task| task.name.include?(task) }
Task.all.detect { |task| task.include?(task.name) }
Task.all.detect { |task| task_name.include?(task.name) }
task
 Task.where('name LIKE ?', "%#{task}%").first
 Task.where('name LIKE ?', "%#{task}%").first.name
task
@all_tasks.include?(task)
@all_tasks.include?("task")
task
@all_tasks.includes?("task")
@all_tasks
@my_tasks
@task
task
params
@current_task
@current_task.name.downcase.parameterize.underscore
task
c
task.name.downcase.parameterize.underscore
task.name
task
c
@current_user.task_manager
@current_user
active_task  = Task.find_by(name:params[:window])
Task.find_by(name:[:window])
params[:window]
params
c
params
c
window
c
@current_task
task
c
task.name.exists?
task.nil?
task.present?
task.name.nil?
task.name.present?
c
task.name
task
task.name.present?
c
task.name
c
task.sub_windows.count
task.sub_windows
c
states_string
c
task.sub_windows
task.sub_windows.count
task.sub_windows.size
c
self
task
@current_task
c
 @all_tasks
@current_task
task
c
states_string
task
window
c
Task.first
c
Task.all
c
Task.first.state
Task.all
Tasks
Task
task
state
exit
Task.first.destroy
@all_tasks
window
task
buy_commodity_id = params[:buy_commodity_id]
buy_commodity_id = params[:buy__commodity_id]
buy_commodity_id = params[:milk_run][:buy__commodity_id]
trade_session_id = params[:milk_run][:trade_session_id]
params
params[:milk_run][:user_id]
exit
c
location['refreshPerMinute']
location['refreshPerMinute'
max_inventory
REFRESH_PER_MINUTE_MAPPING[commodity['name']]
MAX_INVENTORY
c
JSON.parse(params[:milk_run][:sell_location])["name"].split(' |')[0]
JSON.parse(params[:milk_run][:sell_location])["name"].split('|')[0]
JSON.parse(params[:milk_run][:sell_location])["name"].split('|')
JSON.parse(params[:milk_run][:sell_location]).split('|')JSON.parse(params[:milk_run][:sell_location])["name"].split('|')
JSON.parse(params[:milk_run][:sell_location]).split('|')
JSON.parse(params[:milk_run][:sell_location])["name"]
JSON.parse(params[:milk_run][:sell_location])[0]["name"]
JSON.parse(params[:milk_run][:sell_location]).first["name"]
JSON.parse(params[:milk_run][:sell_location]).first[:name]
JSON.parse(params[:milk_run][:sell_location]).first.name
JSON.parse(params[:milk_run][:sell_location]).first
JSON.parse(params[:milk_run][:sell_location])[:name]
JSON.parse(params[:milk_run][:sell_location]).name
JSON.parse(params[:milk_run][:sell_location])[0]
JSON.parse(params[:milk_run][:sell_location])
c
params[:milk_run][:buy_location]
c
CommodityStub.all
c
Commodity.find_or_initialize_by(name: commodity['name'], location: location['name'], updated_at: location['timestamp'])
c
Commodity.find_or_initialize_by(name: commodity['name'], location: location['name'], timestamp: location['timestamp'])
c
existing_run
existing_run.created_at > (Time.now - 4.minutes)
Time.now - 4.minutes
existing_run.created_at > (Time.now - 4.minutes)
existing_run.created_at
c
buy_commodity.inventory
buy_commodity
c
StarBitizenRuns
StarBitizen
StarBitizenRun
records_exist
c
json_request
json_request["secretguid"]
c
ENV['STARBITIZEN_EXCHANGE']
exit
cc
c
cc
c
commodity
c
commodity
c
@secretguid
c
@secretguid
c
Transaction.last
Transaction.create(amount: star_bits, sender_id: from_user_id, receiver_id: to_user_id)
to_user_id
c
User.where("lower(username) LIKE lower(?)", "%#{player_name.downcase}%").first_or_initialize
User.where("lower(username) LIKE lower(?)", "%#{player_name.downcase}%")
player_name.downcase
to_user
c
User.last
to_user.new_record?
to_user
c
to_user = User.where("lower(username) LIKE lower(?)", "%#{player_name.downcase}%").first_or_initialize
player_name.downcase
username
User.where("lower(username) LIKE lower(?)", "%#{player_name.downcase}%").first_or_initialize
c
buy_commodity
buy_commodity.sell.to_i
sell_commodity.buy.to_i * actual_removed
capital
