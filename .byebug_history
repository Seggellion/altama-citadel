c
@event
@event.started?
c
event.started?
event = Event.find(session[:event_id_for_signup] || params[:id])
Event.find(session[:event_id_for_signup] || params[:id])
c
usership.user_id
EventShip.last
c
params[:event_user][:rsi_username]
params
params[:rsi_username]
current_user
update_rsi_username_if_blank
current_user
params
usership
c
params
ship_component
n
c
usership
c
usership
c
      todays_race_users = StarBitizenRaceUser.where("created_at >= ?", Time.zone.now - 24.hours)
Time.now.beginning_of_day
Time.zone.now.beginning_of_day
todays_race_users = StarBitizenRaceUser.where("created_at >= ?", Time.zone.now.beginning_of_day)
StarBitizenRaceUser.last
todays_race_users
c
todays_race_users
c
params
c
event_user_params[:ship_id]
params
ship_id
c
@all_tasks
c
usership
Usership.last
Usership.last.ship
Usership.last
Usership
usership.errors.messages
usership.errors
usership.messages
usership.save.messages
usership.save
usership.create
usership
c
n
usership
c
session[:event_id_for_signup]
session(:event_id_for_signup)
session
c
session(:event_id_for_signup)
event_id
c
@current_user
current_user
@user
c
bootup_path
root_path
event_id
c
params
param
c
params[:id]
params
@event
params
c
params[:event_user][:user_id]
event_user_params[:ship_model]
ship_model
params
ship_name
usership
c
params
Ship.last
Usership.last
Usership
EventUser
c
params[:event_join]
params
param
EventUser.new(event_user_params)
c
event_participant_params
params
param
event_participant_params
c
params
@usership
c
n
c
Turbo::
Turbo.create
Turbo.new
Turbo.session.drive
Turbo.session
Turbo
respond_to
params
@username_exists
rsi_username
c
rsi_username
params
c
rsi_username.url
rsi_username
@username_exists
c
n
rsi_username
@username_exists
format
c
params
c
event.started?
!event.started?
current_user.id
event.owner_id
c
usership.ship
c
usership
usership.user
usership.model
usership.ship
usership
c
EventUser.last
usership
c
capital
manage_existing_runs
update_inventory(actual_removed)
c
units
@buy_commodity.inventory
c
update_inventory(actual_removed)
capital
actual_removed
c
execute_trade(actual_removed, capital)
@starbits
capital
actual_removed
c
@buy_commodity.inventory
[ @buy_commodity.inventory, units].min
c
units
n
@total_units
@total_units]
@buy_commodity.maxInventory
@buy_commodity.maxInventory,
c
@total_units
@buy_commodity
n
@buy_commodity.inventory
c
[ @buy_commodity.maxInventory, @total_units].min
@buy_commodity.maxInventory
c
@buy_commodity.update(maxInventory:4000)
@buy_commodity
@buy_commodity.maxInventory
[ @buy_commodity.maxInventory, @total_units].min
capital
captail
@total_units
@total_unit
[ @buy_commodity.inventory, scu].min
[ @buy_commodity.inventory, units].min
[ @buy_commodity.inventory, units]
 @buy_commodity.inventory
c
process_valid_trade
 @buy_commodity.inventory > 0
c
processor.process
processor
proessor
c
@buy_commodity
c
@buy_commodity
c
Commodity.create("name":"Iron","location":"Baijini Point","buy":354.0,"sell":0.0,"vice":false)
Commodity.create("name":"Iron","location":"Everus Harbor","buy":0.0,"sell":312.0,"vice":false)
Commodity.where(name:"iron")
Commodity.where(name:"Iron")
Commodity.last
c
@commodity_name
Commodity.where(name: @commodity_name)
Commodity.where(name: @commodity_name, location: from_location)
from_location
@commodity_name
@buy_commodity
c
@buy_commodity
c
StarBitizenRun.last
@twitch_channel
c
@buy_commodity.update(inventory:60)
@buy_commodity
c
@buy_commodity
@buy_commodity.update(inventory:12)
@buy_commodity
c
@buy_commodity
c
@buy_commodity.update(inventory:10)
@buy_commodity
c
@buy_commodity.inventory
c
@buy_commodity
c
StarBitizenRun.last
StarBitizenRun.find_by(user_id: to_user_id, twitch_channel: @twitch_channel, profit: 0)
        StarBitizenRun.find_by(user_id: to_user_id, twitch_channel: @twitch_channel, profit: 0)
@twitch_channel = @json_request["twitch_channel"].to_i
to_user_id = User.where("username ILIKE ?", player_name).first.id
 player_name = @json_request["player_name"]
find_current_run
@current_run
c
@current_run
c
