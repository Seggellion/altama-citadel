c
Location.find_by_name(@article.location).trade_terminal
Location.find_by_name(@article.location)
@article.location
c
location
          location.update(parent: params[:article][:parent], location_type: params[:article][:location_type],
          ammenities_fuel: params[:article][:ammenities_fuel],ammenities_rearm: params[:article][:ammenities_rearm],
          ammenities_repair: params[:article][:ammenities_repair], trade_terminal: params[:article][:trade_terminal]
          )
params[:article][:trade_terminal]
c
location
c
params[:format]
params
c
controller_name
controller.name
controller
c
buy_commodity
c
buy_search_query
buy_commodity
buy_commodity = Commodity.search_by_name_and_location(buy_search_query).first
buy_search_query = "#{commodity_name} #{from_location}"
commodity_name
c
buy_commodity
c
search_query = "#{commodity_name} #{from_location}"
buy_commodity
c
commodity_name
from_location
buy_commodity
c
commodity_name
commodity
buy_commodity 
c
commodity_name
Commodity.where("location LIKE ? AND name ILIKE ?", "%#{from_location}%", "%#{commodity_name}%").first
c
commodity
request.body.read
commodity
commidity
commodity
c
buy_commodity > 0 &&  sell_commodity > 0
sell_commodity
buy_commodity
c
@task_manager.tasks.first
@task_manager.tasks.last
@task_manager.tasks
@task_manager
@current_task
c
command
c
@current_task.state.split("-").last
@current_task.state.split("-")
@current_task.state
@current_task.state[-1]
@current_task.state[1]
@current_task.state[0]
@current_task[0]
@current_task[-1]
@current_task.last
@current_task.lastt
@current_task
@task
task
c
@task
@task.update(state:"trade123|#{command}")
@task
task
@task.update(state:'trade123|#{command}')
command
params[:format]
params
c
 date = Date.parse(params[:trade_session][:session_date])
TradeSession
params[:trade_session][:session_date]
params
parrms
c
Commodity.where(name: title).where('sell > ?', 0).first
Commodity.where(name: title).where('sell > ?', 0)
c
TradeRun.last
params
c
trade_run.sell_price > 0 
trade_run.sell_price
trade_run
c
cc
c
i
trade_run
trade_run.sell_price
c
params
c
sell_commodity
( sell_commodity * total_units) - ( buy_commodity * total_units)
c
c\=
to_location
Commodity.where("location LIKE ? AND name = ?", "%#{to_location}%", commodity).first
buy_commodity.present?
sell_commodity.present?
c
test = Commodity.where("location LIKE ? AND name = ?", "%#{from_location}%", commodity).first
test = Commodity.where("location LIKE ? AND name = ?", "%#{from_location}%", commodity)
test = Commodity.where("location LIKE ? AND commodity = ?", "%#{from_location}%", commodity).first
test = Commodity.where("location LIKE ? AND commodity = ?", "%#{from_location}%", commodity)
test = Commodity.where("location LIKE ?", "%#{from_location}%", commodity)
test = Commodity.where("location LIKE ?", "%#{from_location}%",name: commodity)
test = Commodity.find_by("location LIKE ?", "%#{from_location}%",name: commodity)test = Commodity.where("location LIKE ?", "%#{from_location}%",name: commodity)
test = Commodity.find_by("location LIKE ?", "%#{from_location}%",name: commodity)
to_location
sell_commodity.present?
buy_commodity
records_exist
c
Commodity.last
Commodity.includes("Bezdek").first
Commodity.includes("Bezdek")
Commodity.where(location:"HDMS - Bezdek")
Commodity.where(location:"HDMS - Bezdek"
Commodity.last
Commodity.first
Commodity.where(location: "HDMS - Bezdek")
Commodity.find_by(location: "HDMS - Bezdek")
from_location
Commodity.find_by(location: from_location)
Commodity.find_by(location: from_location, name: commodity)
from_location
Commodity.find_by(location: from_location, name: commodity)
Commodity.last
commodity
Commodity.find_by(location: from_location, name: commodity)
from_location
sell_commodity.present?
buy_commodity.present?
records_exist
c
JSON.parse(request.body.read)
SON.parse(request.body.read)J
c
JSON.parse(request.body.read)
request.body.read
request.body
c
request
c
json_request = JSON.parse(request.body.read)
request
c
request.body.read
request.body
request
params
request
c
params
param
request = client.parse_request(request.body.read)
c
client.parse_request(request.body.read)
client
request = client.parse_request(request.body.read)
c
client.parse_request(request.body.read)
request.body.read
c
client
request
request = client.parse_request(request.body.read)
c
client.parse_request(request.body.read)
request.body.read
c
request
client
c
Time.now
Commodity.last
Commodity.lastt
params[:trade_run][:ship]
TradeRun.new(params[:trade_run])
params[:trade_run]
TradeRun.new(params)
TradeRun
params
c
@ships
@all_ship
@all_ships
@all_ships.to_json(only: [:model, :scu])
c
params[:format]
params
c
response.read_body
response = http.request(request)
request = Net::HTTP::Get.new(url)
http.use_ssl = true
http = Net::HTTP.new(url.host, url.port)
url
JSON.parse(response.body)
response.body
JSON.parse(response.body)
response
c
m
c
response.body
response
c
response2 = Net::HTTP.get_response(uri)
JSON.parse(response.body)
response
c
JSON.parse(response.body)
response
c
url
uri
urri
c
JSON.parse(response.body)
response.read_body
response = http.request(request)
request = Net::HTTP::Get.new(url)
http.use_ssl = true
http = Net::HTTP.new(url.host, url.port)
url = URI("https://streamlabs.com/api/v2.0/points?access_token=#{@access_token}&username=#{username}&channel=#{channel}")
response.body
response
http
https
c
uri
request["Bearer"]
reqeuest["Bearer"]
response
c
request
