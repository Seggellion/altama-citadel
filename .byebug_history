c
received_guid
@secretguid
c
ENV['STARBITIZEN_EXCHANGE']
@secretguid
c
User.where('lower(username) = lower(?)', player_name).first.id
User.find_by_username('lower(username) LIKE lower(?)', "%#{player_name}%")
User.find_by_username('lower(username) LIKE lower(?)', "%#{player_name}%").id
c
User.find_by_username(player_name).id
to_user.save!
to_user
to_user = User.where("lower(username) LIKE lower(?)", "%#{player_name.downcase}%").first_or_initiali
c
User.where("username LIKE ?", "%#{player_name}%").first_or_initialize
User.where("username LIKE ?", "%#{player_name}%").first
User.where("username LIKE ?", "%#{player_name}%")
User.where("lower(username) LIKE ?", "%#{player_name}%").
player_name
to_user
c
trade_runs
self
c
@user = User.where('lower(username) = lower(?)', params[:username]).first
params[:username]
@user
@usere
c
User.where("lower(username) LIKE ?", "%#{params[:username]}%")
c
params[:username]
find_by_username(params[:username])
user_id
c
MilkRun.find_by_id(params[:format])
params
c
params
c
self.id
this
self
params
c
TradeSession.last
@trade_session.update!(session_users: updated_usernames, owner_id: 1)
@trade_session.update!(session_users: updated_usernames)
updated_usernames
@trade_session.update(session_users: updated_usernames)
TradeSession.last
@trade_session
c
user
c
normalized_input_usernames
c
TradeSession.last
@trade_session
normalized_session_usernames
c
@trade_session
@trade_session.update!(session_users: trade_session_params[:session_users])
trade_session_params[:session_users]
trade_session_params != nil
@trade_session.update(session_users:trade_session_params)
@trade_session.update(trade_session_params)
@trade_session
trade_session_params
c
MilkRun.find(params[:id])
c
Commodity.joins(:milk_runs).where.not(milk_runs: { sell_commodity_scu: 0 })
c
Commodity.joins(:milk_runs).first
MilkRun.last
Commodity.joins(:milk_runs).first
Commodity.joins(:milk_runs)
Commodity.joins(:milk_runs).where.not(milk_runs: { sell_commodity_scu: 0 }).first
Commodity.joins(:milk_runs).where.not(milk_runs: { sell_commodity_scu: 0 })
@session_milkruns
c
params
params[:milk_run][:buy_commodity_id]
buy_commodity_id,
            MilkRun.create!(
                user_id: user.id, 
                usership_id: params[:milk_run][:trade_session_id], 
                trade_session_id: trade_session_id, 
                commodity_name: params[:milk_run][:commodity_name], 
                buy_commodity_id: buy_commodity_id,
                buy_commodity_scu: params[:milk_run][:buy_commodity_scu],
                buy_commodity_price: params[:milk_run][:buy_commodity_price],      
                max_scu: ship_scu, 
                used_scu:  used_scu,             
                updated_at: Time.now
            )
existing_milkrun
used_scu
c
MilkRun.last
MilkRun.where(trade_session_id: trade_session_id, user_id: user.id).sum(:buy_commodity_scu)
user = User.search_by_username(params[:milk_run][:user_id]).first
User.search_by_username(params[:milk_run][:user_id]).first
params[:user_id]
user
c
params
cparams
c
params
c
params
c
params[:milk_run][:user_id].size
params
c
params[:milk_run][:user_id].size == 0
params[:milk_run][:user_id].size
params[:milk_run][:user_id]
params[:milk_run][:user_id].count 
params[:milk_run][:trade_session_id].count > 0
user.id
user
 MilkRun.where(trade_session_id: trade_session_id, user_id: user.id)
c
buy_commodity_id
trade_session_id
c
trade_session_id
c
current_milkrun
c
sell_total
buy_total
used_scu
params[:milk_run][:sell__commodity_scu]
current_milkrun
c
current_milkrun
buy_commodity_id
c
params
params[:milk_run][:buy_commodity_id]
buy_commodity_id
trade_session_id
current_milkrun
c
@current_user
c
params[:milk_run][:form_type]
params[:milk_run]
params[:milk_run][:commit]
c
buy_commodity_id = params[:milk_run][:buy_commodity_id]
trade_session_id = params[:milk_run][:trade_session_id]
params[:milk_run][:trade_session_id]
params
params[:trade_session_id]
trade_session_id
c
params
c
to_user
c
transaction
c
 json_request["starBits"].to_i
received_guid
@secretguid
transaction
c
User.last
to_user
c
to_user
c
User.last
to_user_id = User.find_by_username(player_name).id
to_user
c
params
c
self.task.name
self.task
self
c
message
message.sender
c
@message_windows
c
@window_states
c
@current_task
@current_task.state
window_state_csv
@window_states
c
states_string
state_name
c
Commodity.joins(:milk_runs).where.not(milk_runs: { sell_commodity_scu: nil })
MilkRun.last
Commodity.joins(:milk_runs).where.not(milk_runs: { sell_commodity_scu: 0 })
@commodities_for_sell
c
MilkRun.last
        MilkRun.create!(
            user_id: user.id, 
            usership_id: params[:milk_run][:trade_session_id], 
            trade_session_id: trade_session_id, 
            buy_commodity_id: buy_commodity_id,
            buy_commodity_scu: params[:milk_run][:buy_commodity_scu],
            buy_commodity_price: params[:milk_run][:buy_commodity_price],      
            #max_scu: integer, 
            used_scu:  used_scu,             
            updated_at: Time.now
        )
c
        MilkRun.create!(
            user_id: user.id, 
            usership_id: params[:milk_run][:trade_session_id], 
            trade_session_id: trade_session_id, 
            buy_commodity_id: buy_commodity_id,
            buy_commodity_scu: params[:milk_run][:buy_commodity_scu],
            buy_commodity_price: params[:milk_run][:buy_commodity_price],      
            #max_scu: integer, 
            used_scu:  used_scu,             
            updated_at: Time.now
        )
user
usere
used_scu
c
User.search_by_username("SEGELION").first
User.search_by_username("SEGELLION").first
user
useer
c
params[:user_id]
user
c
MilkRun.where(trade_session_id: trade_session_id, user_id: user.id).sum(:buy_commodity_scu)
params[:milk_run][:buy_commodity_scu]
params[:milk_run][:buy__commodity_scu]
buy_commodity_id = params[:buy_commodity_id]
para
params[:buy__commodity_id]
buy_commodity_id
v
trade_session_id = params[:trade_session_id]
trade_session_id = params[:milk_run][:trade_session_id]
params
