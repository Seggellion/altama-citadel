c
Commodity.where(name: title).where('sell > ?', 0).first
Commodity.where(name: title).where('sell > ?', 0)
c
TradeRun.last
params
c
trade_run.sell_price > 0 
trade_run.sell_price
trade_run
c
cc
c
i
trade_run
trade_run.sell_price
c
params
c
sell_commodity
( sell_commodity * total_units) - ( buy_commodity * total_units)
c
c\=
to_location
Commodity.where("location LIKE ? AND name = ?", "%#{to_location}%", commodity).first
buy_commodity.present?
sell_commodity.present?
c
test = Commodity.where("location LIKE ? AND name = ?", "%#{from_location}%", commodity).first
test = Commodity.where("location LIKE ? AND name = ?", "%#{from_location}%", commodity)
test = Commodity.where("location LIKE ? AND commodity = ?", "%#{from_location}%", commodity).first
test = Commodity.where("location LIKE ? AND commodity = ?", "%#{from_location}%", commodity)
test = Commodity.where("location LIKE ?", "%#{from_location}%", commodity)
test = Commodity.where("location LIKE ?", "%#{from_location}%",name: commodity)
test = Commodity.find_by("location LIKE ?", "%#{from_location}%",name: commodity)test = Commodity.where("location LIKE ?", "%#{from_location}%",name: commodity)
test = Commodity.find_by("location LIKE ?", "%#{from_location}%",name: commodity)
to_location
sell_commodity.present?
buy_commodity
records_exist
c
Commodity.last
Commodity.includes("Bezdek").first
Commodity.includes("Bezdek")
Commodity.where(location:"HDMS - Bezdek")
Commodity.where(location:"HDMS - Bezdek"
Commodity.last
Commodity.first
Commodity.where(location: "HDMS - Bezdek")
Commodity.find_by(location: "HDMS - Bezdek")
from_location
Commodity.find_by(location: from_location)
Commodity.find_by(location: from_location, name: commodity)
from_location
Commodity.find_by(location: from_location, name: commodity)
Commodity.last
commodity
Commodity.find_by(location: from_location, name: commodity)
from_location
sell_commodity.present?
buy_commodity.present?
records_exist
c
JSON.parse(request.body.read)
SON.parse(request.body.read)J
c
JSON.parse(request.body.read)
request.body.read
request.body
c
request
c
json_request = JSON.parse(request.body.read)
request
c
request.body.read
request.body
request
params
request
c
params
param
request = client.parse_request(request.body.read)
c
client.parse_request(request.body.read)
client
request = client.parse_request(request.body.read)
c
client.parse_request(request.body.read)
request.body.read
c
client
request
request = client.parse_request(request.body.read)
c
client.parse_request(request.body.read)
request.body.read
c
request
client
c
Time.now
Commodity.last
Commodity.lastt
params[:trade_run][:ship]
TradeRun.new(params[:trade_run])
params[:trade_run]
TradeRun.new(params)
TradeRun
params
c
@ships
@all_ship
@all_ships
@all_ships.to_json(only: [:model, :scu])
c
params[:format]
params
c
response.read_body
response = http.request(request)
request = Net::HTTP::Get.new(url)
http.use_ssl = true
http = Net::HTTP.new(url.host, url.port)
url
JSON.parse(response.body)
response.body
JSON.parse(response.body)
response
c
m
c
response.body
response
c
response2 = Net::HTTP.get_response(uri)
JSON.parse(response.body)
response
c
JSON.parse(response.body)
response
c
url
uri
urri
c
JSON.parse(response.body)
response.read_body
response = http.request(request)
request = Net::HTTP::Get.new(url)
http.use_ssl = true
http = Net::HTTP.new(url.host, url.port)
url = URI("https://streamlabs.com/api/v2.0/points?access_token=#{@access_token}&username=#{username}&channel=#{channel}")
response.body
response
http
https
c
uri
request["Bearer"]
reqeuest["Bearer"]
response
c
request
rrequest
response
response.body
request["Authorization"] = "Bearer #{@access_token}"
request["accept"] = 'application/json'
request = Net::HTTP::Get.new(uri)
uri
response
c
JSON.parse(response.body)
response.body
response
c
BASE_URL
response
response.body
c
response
response.body
JSON.parse(response.body)
c
BASE_URL
response = Net::HTTP.get_response(uri)
    uri = URI("#{BASE_URL}/loyalty/users?access_token=#{@access_token}&page=#{page}")
page = 1
@access_token = token
token
@access_token
    uri = URI("#{BASE_URL}/loyalty/users?access_token=#{@access_token}&page=#{page}")
uri
response
response = http.request(request)
request["Bearer"] = '<access_token>'
puts response.read_body
response = http.request(request)
request["Bearer"] = access_token
access_token = "<" + token + ">"
access_token
url = URI("https://streamlabs.com/api/v2.0/points?username=Seggellion&channel=Seggellion")
puts response.read_body
response = http.request(request)
request = Net::HTTP::Get.new(url)
url = URI("https://streamlabs.com/api/v2.0/points?username=Seggellion&channel=Seggellion")
puts response.read_body
response = http.request(request)
request["Bearer"] = token
request = Net::HTTP::Get.new(url)
url = URI("https://streamlabs.com/api/v2.0/points?username=Seggellion&channel=2xyrq957vyeyn97lswqifrdpneqjju")
url
response = http.request(request)
request["Bearer"] = token
request["accept"] = 'application/json'
request = Net::HTTP::Get.new(url)
http.use_ssl = true
http = Net::HTTP.new(url.host, url.port)
url = URI("https://streamlabs.com/api/v2.0/points?username=Seggellion&channel=Seggellion")
    response = Net::HTTP.get_response(uri)
    uri = URI("#{BASE_URL}/loyalty/users?access_token=#{@access_token}&page=#{page}")
page = 1
@acceess_token = token
c
response = Net::HTTP.get_response(uri)
uri = URI("#{BASE_URL}/points?access_token=#{@access_token}&page=#{page}")
@access_token = token
token = "A6CAE49299918B7E93E867DA8911E108550835E072A1E3BEDFFC5B95AA761985BFB5CF49C2DD774346DB72F2AC14C8CD904DFD3AB23DAC4BAB4E6AE3523EC52022859E273D13AEED7BC5CBCC912231833D4770FD410E03C5ECB3915A709080DC995EF41E3FDC768D54685EDC2C28B20D7519894D40D4539F0324907454"
response = Net::HTTP.get_response(uri)
uri = URI("#{BASE_URL}/points?access_token=#{@access_token}&page=#{page}")
page = 1
@access_token = token
token
get_points
self.StreamlabsPoints.get_points(5)
self.StreamlabsPoints.get_points
self.get_points
self.initialize(5)
self
selff
 BASE_URL
c
auth_response = Net::HTTP.post_form(token_uri, auth_params)
token_uri = 'https://streamlabs.com/api/v2.0/token'
auth_response = Net::HTTP.post_form(token_uri, auth_params)
token_uri = URI('https://streamlabs.com/api/v2.0/token')
auth_params
auth_response = Net::HTTP.post_form(token_uri, auth_params)
c
response = URI.open(url).read
url = "https://streamlabs.com/api/v1.0/points?access_token=#{token}"
url
token
token_uri
