c
current_milkrun
c
sell_total
buy_total
used_scu
params[:milk_run][:sell__commodity_scu]
current_milkrun
c
current_milkrun
buy_commodity_id
c
params
params[:milk_run][:buy_commodity_id]
buy_commodity_id
trade_session_id
current_milkrun
c
@current_user
c
params[:milk_run][:form_type]
params[:milk_run]
params[:milk_run][:commit]
c
buy_commodity_id = params[:milk_run][:buy_commodity_id]
trade_session_id = params[:milk_run][:trade_session_id]
params[:milk_run][:trade_session_id]
params
params[:trade_session_id]
trade_session_id
c
params
c
to_user
c
transaction
c
 json_request["starBits"].to_i
received_guid
@secretguid
transaction
c
User.last
to_user
c
to_user
c
User.last
to_user_id = User.find_by_username(player_name).id
to_user
c
params
c
self.task.name
self.task
self
c
message
message.sender
c
@message_windows
c
@window_states
c
@current_task
@current_task.state
window_state_csv
@window_states
c
states_string
state_name
c
Commodity.joins(:milk_runs).where.not(milk_runs: { sell_commodity_scu: nil })
MilkRun.last
Commodity.joins(:milk_runs).where.not(milk_runs: { sell_commodity_scu: 0 })
@commodities_for_sell
c
MilkRun.last
        MilkRun.create!(
            user_id: user.id, 
            usership_id: params[:milk_run][:trade_session_id], 
            trade_session_id: trade_session_id, 
            buy_commodity_id: buy_commodity_id,
            buy_commodity_scu: params[:milk_run][:buy_commodity_scu],
            buy_commodity_price: params[:milk_run][:buy_commodity_price],      
            #max_scu: integer, 
            used_scu:  used_scu,             
            updated_at: Time.now
        )
c
        MilkRun.create!(
            user_id: user.id, 
            usership_id: params[:milk_run][:trade_session_id], 
            trade_session_id: trade_session_id, 
            buy_commodity_id: buy_commodity_id,
            buy_commodity_scu: params[:milk_run][:buy_commodity_scu],
            buy_commodity_price: params[:milk_run][:buy_commodity_price],      
            #max_scu: integer, 
            used_scu:  used_scu,             
            updated_at: Time.now
        )
user
usere
used_scu
c
User.search_by_username("SEGELION").first
User.search_by_username("SEGELLION").first
user
useer
c
params[:user_id]
user
c
MilkRun.where(trade_session_id: trade_session_id, user_id: user.id).sum(:buy_commodity_scu)
params[:milk_run][:buy_commodity_scu]
params[:milk_run][:buy__commodity_scu]
buy_commodity_id = params[:buy_commodity_id]
para
params[:buy__commodity_id]
buy_commodity_id
v
trade_session_id = params[:trade_session_id]
trade_session_id = params[:milk_run][:trade_session_id]
params
params[:user_id]
user
c
buy_commodity_id = params[:buy_commodity_id]
buy_commodity_id = params[:buy__commodity_id]
buy_commodity_id = params[:milk_run][:buy__commodity_id]
trade_session_id = params[:milk_run][:trade_session_id]
params
c
TradeSession.find_by_id(@current_task.state.split("-").last)
TradeSession.find_by_id(@current_task.state.split("-").last
<%=  TradeSession.find_by_id(@current_task.state.split("-").last).session_date %>
TradeSession.last
@trade_session
c
MilkRun
params[:milk_run][:buy_location]
params[:milk_run]
params
params[:buy_location]
params[:buy_location[
params
c
params
c
params
c
trade_run_params
c
trade_run_params[sell_price]
trade_run_params
params
c
@trade_run.update(trade_run_params)
@trade_run = TradeRun.find(params[:id])
@trade_run
@trade_run.update(trade_run_params)
TradeRun.find(params[:id])
trade_run_params
params
c
params
trade_run_params
params
param
trade_run_params
c
Vote.where(position_nomination_id: @position_nomination.id)
Vote.where(@position_nomination.id)
@position_nomination
c
task
c
task
task.update(memo_type: "error", memo_text: "Nomination already exists")
task
task.memo(memo_type: "error", memo_text:"Nomination already exists")
task
c
task
c
task
c
task.update(memo_type: data[:memo_type], memo_text: data[:memo_text])
task
c
task
task.memo(memo_type: "error", memo_text:"Nomination already exists")
task
task_manager
user
c
Task.last
self
@current_user
@current_usere
@task
@current_task
c
@guildstone
c
@current_task.state
position.title == @current_task.state
position.title
c
position.title
c
position.title
c
position.title
position.title == @current_task.state
c
position.title
position.title == @current_task.state
@current_task.state
c
position
c
position
@current_task
c
@current_task
Task
task
position.title
c
location
location\
Commodity.where(location: location, name: commodity_name)
params[:name]
commodities
c
commodity_name
location
commodities
c
@commodities
c
params
c
Commodity.where(location: params[:location])
c
self
selff
self.reputation
self.update(karma:1250, fame:1250)
title_matrix[karma_level - 1][fame_level]
title_matrix[karma_level - 1]
self
fame_level
karma_level
title_matrix[karma_level - 1][fame_level - 1]
