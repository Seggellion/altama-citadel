c
race_users_by_user = StarBitizenRaceUser.joins(:user).group('users.username')
StarBitizenRaceUser
race_users_by_user
ship_races_data
user_races_data
c
to_location
commodity_name
Commodity.where(active: true).search_by_exact_name(commodity_name)
Commodity.where(active: true).search_by_exact_name(commodity_name).search_by_location(to_location).first
Commodity.where(active: true).search_by_exact_name(commodity_name).search_by_location(to_location)
Commodity.where(active: true).search_by_exact_name(commodity_name)
c
commodity_name
to_location
sell_search_query
c
Event.last.update(start_date: "2953-01-21 09:00:00.000000000 +0000")
Event.last
Event.timeline_events(i)
Event.totalYears
Event.timeline_events(i)
Event.timeline_events(i).count
i
timeline_events(i)
event
c
Usership.find_by_id(self.usership_id)
c
Usership.find_by_id(self.usership_id).ship
find_by_id(self.usership_id).ship
self.usership_id
c
n
@aec
aec
n
(params[:rfa][:servicefee].to_f / 10.00).round(2)
Rfa.get_status(params[:rfa][:status_id].to_i)
c
ActionCable.server.broadcast('status_updates', { user_id: current_user.id, status: current_user.online_status, username: current_user.username })
c
ActionCable.server.broadcast('status_updates', { user_id: current_user.id, status: current_user.online_status, username: current_user.username })
c
ActionCable.server.broadcast('status_updates', { user_id: current_user.id, status: current_user.online_status, username: current_user.username })
c
ActionCable.server.broadcast('status_updates', { user_id: current_user.id, status: current_user.online_status, username: current_user.username })
=> 29:     ActionCable.server.broadcast('status_updates', { user_id: current_user.id, status: current_user.online_status, username: current_user.username })
c
ActionCable.server.broadcast('status_updates', { user_id: current_user.id, status: current_user.online_status, username: current_user.username })
c
ActionCable.server.broadcast('status_updates', { message: "Test message" })
c
user.online_status
user
c
current_user
@current_user
status
c
@current_user
current_user
params[:format]
params
c
User.last.email
User.last
user = where(username: auth.info.name).first
current_user
auth.info
c
ENV['DISCORD_CLIENT_ID']
exit
ENV['DISCORD_CLIENT_ID']
ENV['DISCORD_CLIENT_SECRET']
ENV['DISCORD_CLIENT_SECRET'],
ENV['DISCORD_CLIENT_ID']
c
@current_user
c
task
task.name
task.respond_to?(:name)
task
c
@twitch_id
c
@twitch_id 
@twitch_id
user
c
@trade_session_id
params
 existing_milkrun
create_milk_run_and_update_buy_commodity(user, ship_scu) unless existing_milkrun
ship_scu
user
c
receiver = User.find_by(asl_number: asl_number)
asl_number = params[:asl_number]
 User.find_by(asl_number: asl_number)
params
c
@current_user.messages
@current_user.messages.first
@current_user.first
Message.last
@current_user.messages
@curreent_user.messages
 @current_user.filtered_by_receiver(receiver.id)
receiver.id
@current_user.filtered_by_receiver(receiver.id)
receiver.id
receiver
@current_user.filtered_by_receiver(receiver.id).first
@current_user.filtered_by_receiver(receiver.id).count
c
@current_user.filtered_by_receiver(receiver.id).first.sender.username
@current_user.filtered_by_receiver(receiver.id).first.sender
message.sender.username
@current_user.filtered_by_receiver(receiver.id).first
c
@current_user.filtered_by_receiver(receiver.id)
c
messages
messages = self.messages.where(sender_id: receiver) + self.messages.where(receiver_id: receiver)
self.messages.where(sender_id: receiver) + self.messages.where(receiver_id: receiver)
self.messages.where(receiver_id: receiver)
receiver
self.messages.first
self.messages
c
receiver
self.messages.first
self.messages
self
Message.last
self.messages.where(sender_id: receiver)
receiver
c
task
c
receiver
c
receiver_id
@current_user.filtered_by_receiver(receiver_id)
@current_user.filtered_by_receiver(receiver_id).
c
task
receiver_id
@current_user.filtered_by_receiver(receiver_id)
c
message
message.save!
message.save
message
c
current_user
curreent_user
Message.last
params
c
receiver_id = task.split('|')[0].split('-').last
c
Friendship.last
existing_friendship
c
task.update(state:"")
task
existing_friendship
c
current_user.id
current_user
existing_friendship
n
!existing_friendship.nil?
existing_friendship
c
!existing_friendship.nil?
existing_friendship
c
 task.update(state:"")
task
 existing_friendship.update(status:"accepted")
        Friendship.create(
            user_id: current_user.id,
            friend_id: friend.id,
            status: "accepted",
            group: params[:group]
        )
existing_friendship
c
existing_friendship.update!(status:"active")
existing_friendship.update(status:"active")
existing_friendship
c
!existing_friendship.nil?
existing_friendship.nil?
existing_friendship
c
current_user.task_manager.tasks.last
current_user.task_manager.tasks
current_user.task_manager
current_user.tasks
current_user.tasks.last
current_user
@current_user
@current_user.task_manager
current_task
Tsk
task
task.state
Task.state
Friendship.last
Friendship
@current_user
friend
c
self.messages.where(sender_id: receiver)
receiver
c
Message.last
@current_user.filtered_by_receiver(receiver)
c
receiver
c
task
c
Task.last
Message.last
@current_user.filtered_by_receiver(receiver)
c
 self.messages.where(sender_id: receiver)
receiver
c
self.messages.where(sender_id: receiver)
self
@asl_users
@asl_userrs
c
receiver
c
@current_user.messages.last
@current_user.messages
@current_user
task.split('|')[0].split('-').last
task.split('|').split('-').last
task.split('|')
task.split('-')
task
task.state.split('-')
task.state.split('-)
User.find_by_id(69)
User.first
task
