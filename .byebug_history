c
Dir[ 'app/views/desktop/apps/shell_apps/files/*' ].select{ |f| File.file? f }.map{ |f| File.basename f }
c
Dir[ '../*' ].select{ |f| File.file? f }.map{ |f| File.basename f }
Dir.glob('app/views/desktop/apps/shell_apps/files/*').select { |e| File.file? e }
Dir["app/views/desktop/apps/shell_apps/files/*"].select { |f| File.file? File.join("your/folder", f) }
Dir["app/views/desktop/apps/shell_apps/files/*"].first
Dir["app/views/desktop/apps/shell_apps/files/*"]
c
params[:query].split.size
params[:query].split
params[:query].size
c
params[:query]
filename
c
RsiUser.where.not(username:"")
rsi_users.where.not(username:"")
rsi_users.where!(username:"")
rsi_users.where(username:"Seggellion")
rsi_users = rsi_users.to_a
rsi_users.where(username:"Seggellion")
rsi_users.to_a
rsi_users.where
rsi_users.find_each
rsi_users.select
rsi_users.where()
rsi_users.first
rsi_users
c
User.all.sort
User.sort
User.where(username:'')
users
users.find_by_id(1)
users.where()
users.first
users
c
rsi_user.org_title
matched_user.username == rsi_user.username
rsi_user = rsi_users.find_by_username(matched_user.username)
matched_user = matched_users[0]
matched_users[0].username.contains?("Seggellion")
matched_users[0].username.contains("Seggellion")
matched_users[0]
matched_users = users.where(username: rsi_users.pluck(:username))
matched_users
users.where(username: rsi_users.pluck(:username)).sort
users.where(username: rsi_users)
users.where(username: rsi_users.pluck(:username))
users.where(username: {rsi_users.pluck(:username)})
rsi_users.pluck(:username)
rsi_users.contains(username: users)
rsi_users.where.contains(username: users)
rsi_users.where.overlap(username: users)
rsi_users
users
users == rsi_users
rsi_users == users
users.difference(rsi_users).any?
rsi_users = RsiUser.all
users = User.all
users = Users.all
c
records = Event.where.not(event_type:nil)
Event.first.event_type
Event.first.eventt_type
Event.first
Event.firstt
Event.where('event_type != ?', 1)
records = Event.where.not(event_type:2)
records = Event.where.not(event_type:nil)
records = Event.where.not(event_type:2)
records = Event.where.not(event_type:1)
records = Event.where.not(event_type:nil)
records = Event.where(event_type:nil)
records = Event.where(event_type:1)
records = Event.where.not(event_type:1)
Event.first
records = Event.where.not(event_type:1)
c
event.open
!event.open == false
!event.open.nil?
c
@allships.joins(:ship).group('ships.model').count.sort_by{|e| e[1]}.reversec
@allships.joins(:ship).group('ships.model').count.sort_by{|e| e[1]}.reverse
@allships.joins(:ship).group('ships.model').count.sort_by{|e| e[1]}
@allships.joins(:ship).group('ships.model').count.sort_by{|e| e[0]}
@allships.joins(:ship).group('ships.model').count.sort_by{|e| e[1]}
@allships.joins(:ship).group('ships.model').count.sort_by(&[1])
@allships.joins(:ship).group('ships.model').count.sort_by([1])
@allships.joins(:ship).group('ships.model').count.sort
@allships.joins(:ship).group('ships.model').count.first[1]
@allships.joins(:ship).group('ships.model').count.first
@allships.joins(:ship).group('ships.model').count
c
@org_ships_sorted_count
c
Usership.where(:id=>@allships)
Usership.find_all_by_id(@allships)
Usership.select(@allships).firstt
Usership.select(@allships)
@allships.first.id
@allships.first
@allships[]
@allships
c
@allships.joins(:ship).group('ships.model').count
 @allships.all.joins(:ship).group('ships.model').count
@allships
Usership.all.joins(:ship).group('ships.model').count
Usership.all.joins(:ship).group('ships.model')
Usership.all.joins(:ship)
@org_ships_sorted_count.first
@org_ships_sorted_count
c
event
Event.find_by_id(44)
Event.find_by_id(45)
event.update!(open:true)
event
Event.find_by_id(45)
Event.second-last
Event.last
event
c
event.open
c
Event.last
event
c
event.open
c
event.open
c
event.open
c
event
event.update(open:true)
c
event
c
event.save
@event
event
n
event.open
c
event.open
c
event.open
c
event.open
c
event.open
c
event.open
c
event.open
c
event
c
event.open
c
Event.last
Event.last.open
event.open
c
event.update(open:nil)
event.open
event
c
event.open.nil?
event.open
event
c
total_date
date_end.year + 930
c
 total_date
((date_end.year + 930 ) - date_beginning.year)
date_end.year+930
c
year
c
Event.first.update(start_date:new_date)
new_date = Event.first.start_date + 930.years
Event.last.update(start_date:new_date)
new_date = Event.last.start_date + 930.years
Event.last.start_date + 930.years
Event.last.update(start_date:"2022-11-01 20:16:00.000000000 +0000")
Event.first.update(start_date:"2022-10-28 20:16:00.000000000 +0000")
Event.first
Event.first.update(start_date:930.years)
Event.first
Event.last.update(start_date:930.years)
Event.last
records = Event.where(:created_at + 930 => start_date..end_date)
start_date
c
records = Event.where(:created_at => start_date..end_date)
end_date = date_ending.to_date.end_of_day
start_date = date_beginning.to_date.beginning_of_day
date_ending = Date.new(year,12,31)
date_beginning = Date.new(year,1,1) 
year = year + 2010
year
date_beginning
c
total_date = ((date_end.year ) - date_beginning.year)
date_beginning.year
date_beginning
date_end
(total_date / 365).to_i
total_date / 365
total_date = ((date_end ) - date_beginning)
(date_end ) - date_beginning
date_beginning = DateTime.new(2010,3,01)
Time
DateTime
date_end - date_beginning
(date_end ) - date_beginning
date_beginning
date_end
 total_date = ((date_end ) - date_beginning)
c
date_end.start_date
date_end
c
Event.where(:start_date => date)
date = Date.new(year,1,1)
Event.first
year = 2022
year
c
@current_task.state.downcase.split(',')[0].split('-')[-1]
@current_task.state.downcase.split(',')[0].split('-')
@current_task.state.downcase.split(',')[0]
location
c
@current_task.nil?
@current_task
@current_task = @all_tasks.first
@all_tasks
@current_task = @all_tasks.first
c
@locations
location
c
Location.where(parent:location.parent)
@current_task.state.downcase
@locations
c
states_string
