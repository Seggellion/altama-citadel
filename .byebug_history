c
event.open
!event.open == false
!event.open.nil?
c
@allships.joins(:ship).group('ships.model').count.sort_by{|e| e[1]}.reversec
@allships.joins(:ship).group('ships.model').count.sort_by{|e| e[1]}.reverse
@allships.joins(:ship).group('ships.model').count.sort_by{|e| e[1]}
@allships.joins(:ship).group('ships.model').count.sort_by{|e| e[0]}
@allships.joins(:ship).group('ships.model').count.sort_by{|e| e[1]}
@allships.joins(:ship).group('ships.model').count.sort_by(&[1])
@allships.joins(:ship).group('ships.model').count.sort_by([1])
@allships.joins(:ship).group('ships.model').count.sort
@allships.joins(:ship).group('ships.model').count.first[1]
@allships.joins(:ship).group('ships.model').count.first
@allships.joins(:ship).group('ships.model').count
c
@org_ships_sorted_count
c
Usership.where(:id=>@allships)
Usership.find_all_by_id(@allships)
Usership.select(@allships).firstt
Usership.select(@allships)
@allships.first.id
@allships.first
@allships[]
@allships
c
@allships.joins(:ship).group('ships.model').count
 @allships.all.joins(:ship).group('ships.model').count
@allships
Usership.all.joins(:ship).group('ships.model').count
Usership.all.joins(:ship).group('ships.model')
Usership.all.joins(:ship)
@org_ships_sorted_count.first
@org_ships_sorted_count
c
event
Event.find_by_id(44)
Event.find_by_id(45)
event.update!(open:true)
event
Event.find_by_id(45)
Event.second-last
Event.last
event
c
event.open
c
Event.last
event
c
event.open
c
event.open
c
event.open
c
event
event.update(open:true)
c
event
c
event.save
@event
event
n
event.open
c
event.open
c
event.open
c
event.open
c
event.open
c
event.open
c
event.open
c
event
c
event.open
c
Event.last
Event.last.open
event.open
c
event.update(open:nil)
event.open
event
c
event.open.nil?
event.open
event
c
total_date
date_end.year + 930
c
 total_date
((date_end.year + 930 ) - date_beginning.year)
date_end.year+930
c
year
c
Event.first.update(start_date:new_date)
new_date = Event.first.start_date + 930.years
Event.last.update(start_date:new_date)
new_date = Event.last.start_date + 930.years
Event.last.start_date + 930.years
Event.last.update(start_date:"2022-11-01 20:16:00.000000000 +0000")
Event.first.update(start_date:"2022-10-28 20:16:00.000000000 +0000")
Event.first
Event.first.update(start_date:930.years)
Event.first
Event.last.update(start_date:930.years)
Event.last
records = Event.where(:created_at + 930 => start_date..end_date)
start_date
c
records = Event.where(:created_at => start_date..end_date)
end_date = date_ending.to_date.end_of_day
start_date = date_beginning.to_date.beginning_of_day
date_ending = Date.new(year,12,31)
date_beginning = Date.new(year,1,1) 
year = year + 2010
year
date_beginning
c
total_date = ((date_end.year ) - date_beginning.year)
date_beginning.year
date_beginning
date_end
(total_date / 365).to_i
total_date / 365
total_date = ((date_end ) - date_beginning)
(date_end ) - date_beginning
date_beginning = DateTime.new(2010,3,01)
Time
DateTime
date_end - date_beginning
(date_end ) - date_beginning
date_beginning
date_end
 total_date = ((date_end ) - date_beginning)
c
date_end.start_date
date_end
c
Event.where(:start_date => date)
date = Date.new(year,1,1)
Event.first
year = 2022
year
c
@current_task.state.downcase.split(',')[0].split('-')[-1]
@current_task.state.downcase.split(',')[0].split('-')
@current_task.state.downcase.split(',')[0]
location
c
@current_task.nil?
@current_task
@current_task = @all_tasks.first
@all_tasks
@current_task = @all_tasks.first
c
@locations
location
c
Location.where(parent:location.parent)
@current_task.state.downcase
@locations
c
states_string
task
state_name
c
@current_task.state.downcase.split(',')[0][-1]
@current_task
@current_task.state.downcase.split(',')[0][-1
@current_task.state.downcase.include? "subitem"
location
Location.last
Location.first
Location.last
Location.where(parent:@current_task.state.downcase.split(',')[0][-1])
 Location.where(location_type:1)
@locations
c
Location.first
@locations
c
Location.last.type
Location.last.location_type
Location.last
@current_task.state.downcase.split(',')[0][-1]
@current_task.state.downcase.split(',')[0][1]
@current_task.state.downcase.split(',')[0]
@current_task.state.downcase.split(',')
@current_task.state.downcase.split(',')[1]
c
@current_task.name.downcase.include? "location" 
@current_task.name.include? "Location" 
@current_task.name.include? "location" 
@current_task
task
c
params
c
badge_params
c
@task
task
c
@current_task
task
c
@task.destroy
@task
task
c
task_path
task_path(task)
task
c
redirect_to my_hangar_manage_path
my_hangar_manage_path
c
UserBadge.first
UserBadge.where(user_id: current_user.id)
c
@memos
c
@current_task
app1
task
task.view
c
@memos
c
Task.any_memos(current_user.id)
c
 return if total_events = 0
total_events
@event_series
c
command
c
params
command
params
c
params[:query][3..-1]
params[:query][2..-1]
params[:query][1..-1]
