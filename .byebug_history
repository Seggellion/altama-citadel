c
@current_task.state.downcase.split(',')[0].split('-')[-1]
@current_task.state.downcase.split(',')[0].split('-')
@current_task.state.downcase.split(',')[0]
location
c
@current_task.nil?
@current_task
@current_task = @all_tasks.first
@all_tasks
@current_task = @all_tasks.first
c
@locations
location
c
Location.where(parent:location.parent)
@current_task.state.downcase
@locations
c
states_string
task
state_name
c
@current_task.state.downcase.split(',')[0][-1]
@current_task
@current_task.state.downcase.split(',')[0][-1
@current_task.state.downcase.include? "subitem"
location
Location.last
Location.first
Location.last
Location.where(parent:@current_task.state.downcase.split(',')[0][-1])
 Location.where(location_type:1)
@locations
c
Location.first
@locations
c
Location.last.type
Location.last.location_type
Location.last
@current_task.state.downcase.split(',')[0][-1]
@current_task.state.downcase.split(',')[0][1]
@current_task.state.downcase.split(',')[0]
@current_task.state.downcase.split(',')
@current_task.state.downcase.split(',')[1]
c
@current_task.name.downcase.include? "location" 
@current_task.name.include? "Location" 
@current_task.name.include? "location" 
@current_task
task
c
params
c
badge_params
c
@task
task
c
@current_task
task
c
@task.destroy
@task
task
c
task_path
task_path(task)
task
c
redirect_to my_hangar_manage_path
my_hangar_manage_path
c
UserBadge.first
UserBadge.where(user_id: current_user.id)
c
@memos
c
@current_task
app1
task
task.view
c
@memos
c
Task.any_memos(current_user.id)
c
 return if total_events = 0
total_events
@event_series
c
command
c
params
command
params
c
params[:query][3..-1]
params[:query][2..-1]
params[:query][1..-1]
params[:query][0..-1]
params[:query][-1..-1]
params[:query][1..-1]
filename
c
filename
c
params[:query][1]
params[:query][1..1]
params[:query][1..-1]
params[:query][1..0]
params[:query][1..-3]
command
c
params
c
command
c
params
c
params
c
params
c
params[:text_content]
params
c
params
c
params
c
params
c
params
c
params
c
params
c
request.form_vars
request.env["rack.request.form_vars"]
request.env["rack.request.form_vars"
equest.env["rack.request.form_vars"
request.env
c
params
c
request[:post]
request
params[:text_entry]
params[:text_entry"]
params
c
params
c
params
c
params
c
params
c
@usership
render turbo_stream
c
format.turbo_stream
format
c
@alluserships.where.not(show_information:1).size == 0
 @alluserships.where.not(show_information:1).size
c
@alluserships.where.not(show_information:1).size == 0
@alluserships.where.not(show_information:1).size
c
@alluserships.where.not(show_information:1).size
c
@alluserships.where.not(show_information:1).size <= 1
@alluserships.where.not(show_information:1).size
c
@usership.update(usership_params.except(:fid_01, :fid_02).merge(show_information:nil, fid: nil))
 @usership.update(usership_params).merge(show_information:nil, fid: nil)
params
c
@alluserships.where.not(show_information:1).update(show_information:nil)
@alluserships.where.not(show_information:1)
@alluserships.where.not(show_information:1).size
c
@alluserships.where.not(show_information:1)
alluserships.where.not(show_information:1)
alluserships.where.not(show_information:1).
@alluserships.where.not(show_information:1).size
c
self
ship_model
c
Ship.all.order(model: :asc).first
Ship.all.order(model: :desc).first
Ship.all.order(model: :desc)
Ship.first.model
Ship.all.order(model: :asc)
Ship
Dhip
c
SecureRandom.base64.delete('/+=')[0, digits]
SecureRandom.base64.delete('/+=')[0, 4]
SecureRandom.base64.delete('/+=')[0, 8]
 SecureRandom.send(:choose, [*'a'..'z'], digits)
c
cc
c
SecureRandom.send(:choose, [*'a'..'z'], digits)
SecureRandom.send(:choose, [*'a'..'z'], 8)
digits
c
Task.last
@current_task
app1
task
task.view
c
@fullscreen_tasks
c
@fullscreen_tasks.first
fullscreen_tasks.first
c
event_users
c
EventShip.last
EventShip
EventShip.last
event_users
c
@event_ships.each(&:destroy)
c
EventShip.find(event_ships_ids).destroy
EventShip.find(event_ships_ids)
EventShip.find(event_ships_ids
EventShip.find(event_ships_ids).destroy_all
EventShip.find(event_ships_ids)
EventShip.where(event_ships_ids)
EventShip.find(event_ships_ids)
event_ships.delete_all
event_ships.delete
c
event_ships
c
event_ships.delete
event_ships.delete_all
event_ships.destroy
event_ships.destroy_all
event_ships =  event_ships << EventShip.find_by(event_id: eventuser.event_id)
event_ships << EventShip.find_by(event_id: eventuser.event_id)
event_ships >> EventShip.find_by(event_id: eventuser.event_id)
event_ships = []
event_ships.merge(EventShip.find_by(event_id: eventuser.event_id))
event_ships = {}
