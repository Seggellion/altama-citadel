c
TradeRun.last.owner
TradeRun.last.user
TradeRun.last
TradeRun.where(trade_session_id: trade_session_id).joins(:owner).group('users.username').sum(:profit)
TradeRun.where(trade_session_id: trade_session_id).joins(:user).group('users.username').sum(:profit)
Traderun.where(trade_session_id: trade_session_id).joins(:user).group('users.username').sum(:profit)
params[:trade_session_id]
c
params[:trade_session]
params
c
@commodity_buy_price = Commodity.find_by(location: params[:trade_run][:sell_location], name: @trade_run.commodity.name)
@trade_run.commodity.name
@traderun.commodity
@traderun.commodity.name
Commodity.last
params[:trade_run][:sell_location]
params[:trade_run]
Commodity
params
@trade_run
@trade_run.sell_location.id
@trade_run.sell_location
c
@trade_run
trade_run_location_params
c
trade_run_location_params
@trade_run
c
params
TradeRun.find(params[:id])
params
c
trade_run_params
trade_run_params[:selling_price]
c
TradeRun.find(params[:id])    
params
TradeRun.last
@trade_run
trade_run_params
c
@trade_session
params
c
ActionCable.server.broadcast("user_profits_channel", profits)
ActionCable.server.broadcast("user_profits", profits: profits)
ActionCable.server.broadcast 'user_profits_channel', profits: profits
Rails.logger.info "Broadcasted data: #{profits}"
MilkRun.group(:user_id).sum(:profit)
grouped_profits
c
current_milkrunc
current_milkrun
params[:username]
params[:milk_run]params[:username]
params[:milk_run]
param
params[:milk_run][:user_id]
User.search_by_username(params[:milk_run][:user_id]).first
c
user.id
user.idd
user
c
 User.search_by_username(params[:milk_run][:user_id]).first
user
c
User.last
user
c
user
c
user
c
user
c
updated_usernames
user
c
User.last
params[:username]
User.last
User.where('lower(username) = lower(?)', params[:username]).first
params[:username]
@user
c
@user
c
profit = sell_total - buy_total
buy_total
sell_total
params
c
current_milkrun
buy_commodity_scu
sell_total 
profit = sell_total - buy_total
buy_total = buy_commodity_scu * buy_commodity_price
buy_commodity_price
buy_total
sell_total
profit = sell_total - buy_total
buy_commodity_price = current_milkrun.buy_commodity_price
params
params[:milk_run][:buy_commodity_price]
buy_commodity_scu
buy_total = buy_commodity_scu * params[:milk_run][:buy_commodity_price].to_i
buy_commodity_scu = current_milkrun.buy_commodity_scu
current_milkrun.buy_commodity_scu
params
params[:milk_run][:buy_commodity_scu]
buy_total
sell_total
c
received_guid
@secretguid
c
ENV['STARBITIZEN_EXCHANGE']
@secretguid
c
User.where('lower(username) = lower(?)', player_name).first.id
User.find_by_username('lower(username) LIKE lower(?)', "%#{player_name}%")
User.find_by_username('lower(username) LIKE lower(?)', "%#{player_name}%").id
c
User.find_by_username(player_name).id
to_user.save!
to_user
to_user = User.where("lower(username) LIKE lower(?)", "%#{player_name.downcase}%").first_or_initiali
c
User.where("username LIKE ?", "%#{player_name}%").first_or_initialize
User.where("username LIKE ?", "%#{player_name}%").first
User.where("username LIKE ?", "%#{player_name}%")
User.where("lower(username) LIKE ?", "%#{player_name}%").
player_name
to_user
c
trade_runs
self
c
@user = User.where('lower(username) = lower(?)', params[:username]).first
params[:username]
@user
@usere
c
User.where("lower(username) LIKE ?", "%#{params[:username]}%")
c
params[:username]
find_by_username(params[:username])
user_id
c
MilkRun.find_by_id(params[:format])
params
c
params
c
self.id
this
self
params
c
TradeSession.last
@trade_session.update!(session_users: updated_usernames, owner_id: 1)
@trade_session.update!(session_users: updated_usernames)
updated_usernames
@trade_session.update(session_users: updated_usernames)
TradeSession.last
@trade_session
c
user
c
normalized_input_usernames
c
TradeSession.last
@trade_session
normalized_session_usernames
c
@trade_session
@trade_session.update!(session_users: trade_session_params[:session_users])
trade_session_params[:session_users]
trade_session_params != nil
@trade_session.update(session_users:trade_session_params)
@trade_session.update(trade_session_params)
@trade_session
trade_session_params
c
MilkRun.find(params[:id])
c
Commodity.joins(:milk_runs).where.not(milk_runs: { sell_commodity_scu: 0 })
c
Commodity.joins(:milk_runs).first
MilkRun.last
Commodity.joins(:milk_runs).first
Commodity.joins(:milk_runs)
Commodity.joins(:milk_runs).where.not(milk_runs: { sell_commodity_scu: 0 }).first
Commodity.joins(:milk_runs).where.not(milk_runs: { sell_commodity_scu: 0 })
@session_milkruns
c
params
params[:milk_run][:buy_commodity_id]
buy_commodity_id,
            MilkRun.create!(
                user_id: user.id, 
                usership_id: params[:milk_run][:trade_session_id], 
                trade_session_id: trade_session_id, 
                commodity_name: params[:milk_run][:commodity_name], 
                buy_commodity_id: buy_commodity_id,
                buy_commodity_scu: params[:milk_run][:buy_commodity_scu],
                buy_commodity_price: params[:milk_run][:buy_commodity_price],      
                max_scu: ship_scu, 
                used_scu:  used_scu,             
                updated_at: Time.now
            )
existing_milkrun
used_scu
c
MilkRun.last
MilkRun.where(trade_session_id: trade_session_id, user_id: user.id).sum(:buy_commodity_scu)
user = User.search_by_username(params[:milk_run][:user_id]).first
User.search_by_username(params[:milk_run][:user_id]).first
params[:user_id]
user
c
params
cparams
c
params
c
params
c
params[:milk_run][:user_id].size
params
c
params[:milk_run][:user_id].size == 0
params[:milk_run][:user_id].size
params[:milk_run][:user_id]
params[:milk_run][:user_id].count 
params[:milk_run][:trade_session_id].count > 0
user.id
user
 MilkRun.where(trade_session_id: trade_session_id, user_id: user.id)
c
buy_commodity_id
trade_session_id
c
trade_session_id
c
current_milkrun
c
sell_total
buy_total
used_scu
params[:milk_run][:sell__commodity_scu]
current_milkrun
