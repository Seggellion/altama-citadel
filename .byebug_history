c
event
uid
user
c
bot_cmd
bot_cmd = Discordrb::Commands::CommandBot.new token: token, prefix: '!'
token = "OTE4MDI2NjgzODIxNDkwMTc2.YbBQ-Q.N-0inQHG75K01ywC1ssodWbpfzI"
bot_cmd = Discordrb::Commands::CommandBot.new token: token, prefix: '!'
token = 'hello'
ENV['GOOGLE_APPLICATION_CREDENTIALS'] 
Discord
c
@rfa
c
location = Location.find_by("lower(name) = ?", location_name.downcase)
location = Location.find_by("lower(location_name) = ?", location_name.downcase)
location_name = api_params['location_name']
api_params['location_name']
location_name = name:api_params['location_name']
location = Location.find_by("lower(location_name) = ?", location_name.downcase)
api_params['location_name'].downcase
api_params['location_name'].doowncase
Location
api_params['location_name'].lowercase
api_params['location_name']
location
c
params
c
params
c
Users.first
Users
users
params
c
User.where(online_status: "rfa_online")
User.first
online_users
c
render json: all_locations
render json: all_location
render json
all_locations
render json: all_locations
all_locations
c
eligible_rfas
c
eligible_rfas
c
eligible_rfas
c
User.where(online_status:"rfa_online").empty?
User.where(online_status:"rfa_online").nil?
User.where(online_status:"rfa_online")
c
current_user
user
self
c
User.last
User.last.destroy
User.last
new_user.save
new_user = User.new(rsi_username: api_params['rsi_username'], password: random_password )
new_user.errors.messages
new_user.errors
new_user.save
new_user = User.new(rsi_username: api_params['rsi_username'], encrypted_password: random_password )
User.last
User.create(rsi_username: api_params['rsi_username'], encrypted_password: random_password )
random_password
        User.create(rsi_username: api_params['rsi_username'], 
        encrypted_password: random_password ).errors
        User.create(rsi_username: api_params['rsi_username'], 
        encrypted_password: random_password )!
        User.create(rsi_username: api_params['rsi_username'], 
        encrypted_password: random_password )
User.last
api_params['rsi_username']
User.find_by_rsi_username(api_params['rsi_username'])
user
user.rsi_username
c
User.first.password
User.first
User.firstt
new_user.errors
user.errors
user.errors.messages
new_user.save.errors
new_user.save.with_errors
new_user.save!
new_user.save
new_user = User.new(rsi_username: api_params['rsi_username'])
User.new(rsi_username: api_params['rsi_username'])
User.last
User.create(rsi_username: api_params['rsi_username'])
c
api_params['rsi_username']
api_params.keys
api_params.key
api_params
JSON.parse(api_params)
sub_hash[api_params]
sub_hash['api_params']
sub_hash(api_params)
hash.dig(api_params)
hash(api_params)
hash[api_params]
api_params[:rsi_username]
api_params.first
api_params
api_username
User.create(api_params)
Rfa.new(api_params)
api_params{ship_id}
api_params{:ship_id}
api_params[:ship_id]
api_params.ship_id
api_params
params[:data][:attributes].rsi_username
api_params.to_json.rsi_username
api_params[].rsi_username
api_params.rsi_username
api_params
api_params.rsi_username
c
Rfa.new(api_params.as_json)
api_params.as_json
api_params.rsi_username
api_params.params
Rfa.new(api_params)
api_params
c
params[:data][:attributes]
params[:data]
params
c
params
rfa_params
c
params[:rsi_username]
params[rsi_username]
params[:rsi_username]
parmas[:rsi_username]
params
c
Rfa.first
self.first
param
params
self
c
ANSI.blue{ "World" }
c
todays_date
c
Event.last
Event.lastt
Event.second
Event.first
Events.first
event.start_date
event.start_dat
todays_date > event.start_date
c
todays_date > event.start_date
event.start_date
c
todays_date > event.start_date
event.start_date
todays_date
c
@current_task
c
@current_task
task
c
task
@current_task
current_task
task
c
cc
c
@task_manager
c
Task.first
@task_manager = TaskManager.find_by(user_id: current_user)
@current_user = current_user
task
c
task
c
task
c
task
c
v
c
@current_task
task
c
task.view
task
c
task.view
task
c
@current_task
c
Task.first
@all_tasks
@current_task
c
@current_task
c
task
@current_task
c
app1
@current_task
task
c
app1
task
c
task
@current_task
c
@current_task
c
@current_task
task
c
@current_task = @all_tasks.where(name: 'My Hangar').first
c
@task
@current_task
c
task
c
app1
defined?(app1)
task
 defined?(task)
app1
c
@all_tasks.last
@all_tasks.first
@current_task.last
@current_task
@current_task.
