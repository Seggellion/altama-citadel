c
messages[index - 1]
messages[index + 1]
message[index + 1]
index
messages
user
c
current_message.prev_created(receiver)
receiver.id
receiver
current_message.prev_created(2)
current_message.prev_created(receiver)
current_message
previous_message
c
receiver
c
User.find_by(username: c
receiver_id
receiver
c
receiver
c
User.find_by(id: c
receiver_id
receiver.id
receiver
c
User.find_by
receiver_id
receiver
c
receiver
messages
user
c
current_message
c
params
current_message.user_id
current_message
@current_user.filtered_by_receiver(2).last
last_message
@current_user.filtered_by_receiver(2).last
@current_user.filtered_by_receiver(2)
@current_user
current_message
c
params
current_message
c
task
c
task
user.filtered_by_receiver(2)
user.filtered_by_receiver(user.id)
user
messages
c
user.filteredc
user
messages
c
@last_message.sender_name
@last_message
c
@last_message.content
last_message.content
@last_message.sender_name
@last_message
c
@last_message.sender_name
@last_message
@last_message.sender_id.username
@last_message.sender_id
@last_message.sender
@last_message
c
task.state
task
@last_message
c
\c
c
task
c
task
c
task.state
c
task
sender
c
current_message.prev_created
current_message
current_user
c
Message.last
current_user.username
current_user.id
current_user.filtered_by_receiver(1)
current_user.filtered_by_receiver(2)
current_user.filtered_by_receiver(current_user.id)
current_user
current_user.filtered_by_receiver(current_user.id).last
current_message
c
User.last.email
User.last
user = where(username: auth.info.name).first
current_user
auth.info
c
ENV['DISCORD_CLIENT_ID']
exit
ENV['DISCORD_CLIENT_ID']
ENV['DISCORD_CLIENT_SECRET']
ENV['DISCORD_CLIENT_SECRET'],
ENV['DISCORD_CLIENT_ID']
c
@current_user
c
task
task.name
task.respond_to?(:name)
task
c
@twitch_id
c
@twitch_id 
@twitch_id
user
c
@trade_session_id
params
 existing_milkrun
create_milk_run_and_update_buy_commodity(user, ship_scu) unless existing_milkrun
ship_scu
user
c
receiver = User.find_by(asl_number: asl_number)
asl_number = params[:asl_number]
 User.find_by(asl_number: asl_number)
params
c
@current_user.messages
@current_user.messages.first
@current_user.first
Message.last
@current_user.messages
@curreent_user.messages
 @current_user.filtered_by_receiver(receiver.id)
receiver.id
@current_user.filtered_by_receiver(receiver.id)
receiver.id
receiver
@current_user.filtered_by_receiver(receiver.id).first
@current_user.filtered_by_receiver(receiver.id).count
c
@current_user.filtered_by_receiver(receiver.id).first.sender.username
@current_user.filtered_by_receiver(receiver.id).first.sender
message.sender.username
@current_user.filtered_by_receiver(receiver.id).first
c
@current_user.filtered_by_receiver(receiver.id)
c
messages
messages = self.messages.where(sender_id: receiver) + self.messages.where(receiver_id: receiver)
self.messages.where(sender_id: receiver) + self.messages.where(receiver_id: receiver)
self.messages.where(receiver_id: receiver)
receiver
self.messages.first
self.messages
c
receiver
self.messages.first
self.messages
self
Message.last
self.messages.where(sender_id: receiver)
receiver
c
task
c
receiver
c
receiver_id
@current_user.filtered_by_receiver(receiver_id)
@current_user.filtered_by_receiver(receiver_id).
c
task
receiver_id
@current_user.filtered_by_receiver(receiver_id)
c
message
message.save!
message.save
message
c
current_user
curreent_user
Message.last
params
c
receiver_id = task.split('|')[0].split('-').last
c
Friendship.last
existing_friendship
c
task.update(state:"")
task
existing_friendship
c
current_user.id
current_user
existing_friendship
n
!existing_friendship.nil?
existing_friendship
c
!existing_friendship.nil?
existing_friendship
c
 task.update(state:"")
task
 existing_friendship.update(status:"accepted")
        Friendship.create(
            user_id: current_user.id,
            friend_id: friend.id,
            status: "accepted",
            group: params[:group]
        )
existing_friendship
c
existing_friendship.update!(status:"active")
existing_friendship.update(status:"active")
existing_friendship
c
!existing_friendship.nil?
existing_friendship.nil?
existing_friendship
c
current_user.task_manager.tasks.last
current_user.task_manager.tasks
current_user.task_manager
current_user.tasks
current_user.tasks.last
current_user
@current_user
@current_user.task_manager
current_task
Tsk
task
task.state
Task.state
