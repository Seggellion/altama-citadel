c
@current_task.state
position.title == @current_task.state
position.title
c
position.title
c
position.title
c
position.title
position.title == @current_task.state
c
position.title
position.title == @current_task.state
@current_task.state
c
position
c
position
@current_task
c
@current_task
Task
task
position.title
c
location
location\
Commodity.where(location: location, name: commodity_name)
params[:name]
commodities
c
commodity_name
location
commodities
c
@commodities
c
params
c
Commodity.where(location: params[:location])
c
self
selff
self.reputation
self.update(karma:1250, fame:1250)
title_matrix[karma_level - 1][fame_level]
title_matrix[karma_level - 1]
self
fame_level
karma_level
title_matrix[karma_level - 1][fame_level - 1]
c
self.reputation
self.update(fame:500)
current_user
self.reputation
self
fame_level
karma_level
title_matrix[karma_level - 1][fame_level - 1]
c
params
params[:task]
task
c
task
c
task.memo(memo_type: "error", memo_text:"Error: No user in Altama Database.")
c
task.memo(memo_type: "error", memo_text:"Error: No user in Altama Database.")
c
 task.memo(memo_type: "error", memo_text:"Error: No user in Altama Database.")
c
 task.memo(memo_type: "error", memo_text:"Error: No user in Altama Database.")
c
task.memo(memo_type: "error", memo_text:"Error: No user in Altama Database.")
c
task.memo(memo_type: "error", memo_text:"Error: No user in Altama Database.")
c
 task.memo(memo_type: "error", memo_text:"Error: No user in Altama Database.")
c
 task.memo(memo_type: "error", memo_text:"Error: No user in Altama Database.")
c
task.memo(memo_type: "error", memo_text:"Error: No user in Altama Database.")
c
task
task.memo(memo_type: "error", memo_text:"Error: No user in Altama Database.")
task =  Task.find_by(task_manager_id:@task_manager.id, name: "User profile")
task
task =  Task.find_by(task_manager_id:@task_manager.id)
Task.find_by(task_manager_id:6)
params
@task
current_task
@task_manager
@task
@current_task
RsiUser.org_user_type_match(rsi_user)  
rsi_user = RsiUser.find_by('lower(username) = ?', current_user.username.downcase)
RsiUser.org_user_type_match(rsi_user)  
User.first
RsiUser.find_by('lower(username) = ?', current_user.username.downcase)
current_user.username.downcase
current_user.username
RsiUser.first
RSIUser.first
User.first
c
total_members
consensus
c
position.total_votes
Position
position.position_nomination
position_nomination
position
c
UserPosition.last
position.user_position.first
UserPosition
position
user_position
position.position_nominations
position
c
Vote.last
Vote
@vote
nomination
position
c
PositionNomination.last
params[:nomination]
PositionNomination.find_by_id(params[:nomination])
params
@vote
c
position.position
c
position.userc
position.user
position.nominator
position
position.position
position.positions.first
position.positions
position.position
position
c
giveaway_params
c
handle_locations(commodity, commodity_data['data']['buyLocations'])
c
handle_locations(commodity, commodity_data['data']['buyLocations'])
commodity_data
c
commodity_data
c
commodities[0]
commodiities[0]
c
location_key["name"]
c
commodity_json["data"]["buyLocations"][3]
commodity_json["data"]["buyLocations"][2]
commodity_json["data"]["buyLocations"][1]
commodity_json["data"]["buyLocations"][0]
commodity_response
new_url
key
key["location"]
key["name"]
c
json["data"]["commodities"][0]
json["data"]["commodities"][name:"Titanium"]
json["data"]["commodities"]["Titanium"]
json["data"]["commodities"]
c
location_key["name"]
c
location_key["name"]
key["name"]location_key["name"]
c
key["name"]
c
key["name"]
c
key["name"]
c
key["name"]
c
location_key["name"]
key["name"]
c
key["name"]
c
key["name"]
c
key["name"]
c
key["name"]
c
key["name"]
c
key["name"]
c
key["name"]
c
key["name"]
c
key["name"]
c
key["name"]
c
key["name"]
c
key["name"]
c
key["name"]
c
key["name"]
c
key["name"]
c
key["name"]
c
key["name"]
existing_timestamp
c
existing_timestamp 
c
key["name"]
location_key["buy"]
c
params[:article][:location][:location_type].nil?
params[:article]
params[:article][:location]
params[:article][:location][:location_type]
c
@article
@article.location
c
Commodity.where(location:nil).destroy_all
commodity.destroy
commodity
c
commodity.destroy
commodity
commodity.location
c
commodity.destroy
commodity
c
sell_commodity
Commodity.search_by_name_and_location(sell_search_query).order("DATE(updated_at) DESC").first
