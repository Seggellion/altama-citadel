c
UserBadge.first
UserBadge.where(user_id: current_user.id)
c
@memos
c
@current_task
app1
task
task.view
c
@memos
c
Task.any_memos(current_user.id)
c
 return if total_events = 0
total_events
@event_series
c
command
c
params
command
params
c
params[:query][3..-1]
params[:query][2..-1]
params[:query][1..-1]
params[:query][0..-1]
params[:query][-1..-1]
params[:query][1..-1]
filename
c
filename
c
params[:query][1]
params[:query][1..1]
params[:query][1..-1]
params[:query][1..0]
params[:query][1..-3]
command
c
params
c
command
c
params
c
params
c
params
c
params[:text_content]
params
c
params
c
params
c
params
c
params
c
params
c
params
c
request.form_vars
request.env["rack.request.form_vars"]
request.env["rack.request.form_vars"
equest.env["rack.request.form_vars"
request.env
c
params
c
request[:post]
request
params[:text_entry]
params[:text_entry"]
params
c
params
c
params
c
params
c
params
c
@usership
render turbo_stream
c
format.turbo_stream
format
c
@alluserships.where.not(show_information:1).size == 0
 @alluserships.where.not(show_information:1).size
c
@alluserships.where.not(show_information:1).size == 0
@alluserships.where.not(show_information:1).size
c
@alluserships.where.not(show_information:1).size
c
@alluserships.where.not(show_information:1).size <= 1
@alluserships.where.not(show_information:1).size
c
@usership.update(usership_params.except(:fid_01, :fid_02).merge(show_information:nil, fid: nil))
 @usership.update(usership_params).merge(show_information:nil, fid: nil)
params
c
@alluserships.where.not(show_information:1).update(show_information:nil)
@alluserships.where.not(show_information:1)
@alluserships.where.not(show_information:1).size
c
@alluserships.where.not(show_information:1)
alluserships.where.not(show_information:1)
alluserships.where.not(show_information:1).
@alluserships.where.not(show_information:1).size
c
self
ship_model
c
Ship.all.order(model: :asc).first
Ship.all.order(model: :desc).first
Ship.all.order(model: :desc)
Ship.first.model
Ship.all.order(model: :asc)
Ship
Dhip
c
SecureRandom.base64.delete('/+=')[0, digits]
SecureRandom.base64.delete('/+=')[0, 4]
SecureRandom.base64.delete('/+=')[0, 8]
 SecureRandom.send(:choose, [*'a'..'z'], digits)
c
cc
c
SecureRandom.send(:choose, [*'a'..'z'], digits)
SecureRandom.send(:choose, [*'a'..'z'], 8)
digits
c
Task.last
@current_task
app1
task
task.view
c
@fullscreen_tasks
c
@fullscreen_tasks.first
fullscreen_tasks.first
c
event_users
c
EventShip.last
EventShip
EventShip.last
event_users
c
@event_ships.each(&:destroy)
c
EventShip.find(event_ships_ids).destroy
EventShip.find(event_ships_ids)
EventShip.find(event_ships_ids
EventShip.find(event_ships_ids).destroy_all
EventShip.find(event_ships_ids)
EventShip.where(event_ships_ids)
EventShip.find(event_ships_ids)
event_ships.delete_all
event_ships.delete
c
event_ships
c
event_ships.delete
event_ships.delete_all
event_ships.destroy
event_ships.destroy_all
event_ships =  event_ships << EventShip.find_by(event_id: eventuser.event_id)
event_ships << EventShip.find_by(event_id: eventuser.event_id)
event_ships >> EventShip.find_by(event_id: eventuser.event_id)
event_ships = []
event_ships.merge(EventShip.find_by(event_id: eventuser.event_id))
event_ships = {}
event_ships.merge(EventShip.find_by(event_id: eventuser.event_id))
event_ships = []
event_ships.merge(EventShip.find_by(event_id: eventuser.event_id))
c
event_ships
c
event_user
event_user.event_series_id.present?
event_user.must_join_all?
c
event.event_series
event
event_user.event.event_series
event_user.event
event_user.event.event_series
event_user.event_series
event_user
c
current_user
params
event_user
eventuser
event
self
event_user.event_series_id
c
event_ship.destroy
event_ship
c
current_event.event_series_id
event_series
c
current_event.id
EventSeries.find_by(event_id: current_event.id)
event_series.must_join_all
EventSeries.first
current_event
event_series
c
params[:event_series][:keyword_required]
params[:keyword_required][:keyword_required]
params
params[:keyword_required]
c
self.keyword_required
c
self.keyword_required
self
c
@event_user
c
@event_user.update(ship_fid: "test")
@event_user.update(ship_fid: usership.fid.to_s)
@event_user.update(ship_fid: usership.fid)!
@event_user.update(ship_fid: usership.fid)
usership.fid
@event_user
c
usership.fid
usership
@event_user.update(ship_fid: usership.fid)
@event_user.merge(ship_fid: usership.fid)
params
c
current_event.update(title:"notactually multi-event")
current_event
c
event
eventuser
event.usership
event.user_ship
event.usership
event
