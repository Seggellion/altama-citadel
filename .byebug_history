c
CommodityStub.all
c
Commodity.find_or_initialize_by(name: commodity['name'], location: location['name'], updated_at: location['timestamp'])
c
Commodity.find_or_initialize_by(name: commodity['name'], location: location['name'], timestamp: location['timestamp'])
c
existing_run
existing_run.created_at > (Time.now - 4.minutes)
Time.now - 4.minutes
existing_run.created_at > (Time.now - 4.minutes)
existing_run.created_at
c
buy_commodity.inventory
buy_commodity
c
StarBitizenRuns
StarBitizen
StarBitizenRun
records_exist
c
json_request
json_request["secretguid"]
c
ENV['STARBITIZEN_EXCHANGE']
exit
cc
c
cc
c
commodity
c
commodity
c
@secretguid
c
@secretguid
c
Transaction.last
Transaction.create(amount: star_bits, sender_id: from_user_id, receiver_id: to_user_id)
to_user_id
c
User.where("lower(username) LIKE lower(?)", "%#{player_name.downcase}%").first_or_initialize
User.where("lower(username) LIKE lower(?)", "%#{player_name.downcase}%")
player_name.downcase
to_user
c
User.last
to_user.new_record?
to_user
c
to_user = User.where("lower(username) LIKE lower(?)", "%#{player_name.downcase}%").first_or_initialize
player_name.downcase
username
User.where("lower(username) LIKE lower(?)", "%#{player_name.downcase}%").first_or_initialize
c
buy_commodity
buy_commodity.sell.to_i
sell_commodity.buy.to_i * actual_removed
capital
sell_commodity
sell_commodity.buy.to_i
actual_removed
profit
c
StarBitizenRun.create(commodity_id:buy_commodity.id, profit:total_profit, user_id: to_user_id, scu: actual_removed)
StarBitizenRun
c
StarBitizenRun
StarBitizenRun.create(commodity_id:buy_commodity.id, profit:total_profit, user_id: to_user_id, scu: actual_removed)
c
StarBitizenRun.create(commodity_id:buy_commodity.id, profit:total_profit, user_id: to_user_id, scu: actual_removed)
c
StarBitizenRun.create(commodity_id:buy_commodity.id, profit:total_profit, user_id: to_user_id, scu: actual_removed)
c
total_units.to_i
total_units
buy_commodity.maxInventory
buy_commodity.maxInventory.to_i
[buy_commodity.maxInventory.to_i, total_units].min
c
[buy_commodity.maxInventory, total_units].min
c
records_exist
c
buy_commodity.decrement(:inventory, total_units.to_i)
buy_commodity.inventory.decrement(:inventory, total_units.to_i)
total_units.to_i
buy_commodity.inventory
c
c'
player_name
c
to_location
total_units
c
new_inventory = [commodity.inventory + increase_amount, commodity.maxInventory].min
c
commodity
commodity.inventory
new_inventory = [commodity.inventory + increase_amount, commodity.maxInventory].min
commodity
commodity.refreshPerMinute
increase_amount
 c
commodity.refreshPerMinute
increase_amount
c
commodity.refreshPerMinute
ommodity.refreshPerMinute
commodity
INVENTORY_INCREASE
c
Task.last
c
TradeRun.last.owner
TradeRun.last.user
TradeRun.last
TradeRun.where(trade_session_id: trade_session_id).joins(:owner).group('users.username').sum(:profit)
TradeRun.where(trade_session_id: trade_session_id).joins(:user).group('users.username').sum(:profit)
Traderun.where(trade_session_id: trade_session_id).joins(:user).group('users.username').sum(:profit)
params[:trade_session_id]
c
params[:trade_session]
params
c
@commodity_buy_price = Commodity.find_by(location: params[:trade_run][:sell_location], name: @trade_run.commodity.name)
@trade_run.commodity.name
@traderun.commodity
@traderun.commodity.name
Commodity.last
params[:trade_run][:sell_location]
params[:trade_run]
Commodity
params
@trade_run
@trade_run.sell_location.id
@trade_run.sell_location
c
@trade_run
trade_run_location_params
c
trade_run_location_params
@trade_run
c
params
TradeRun.find(params[:id])
params
c
trade_run_params
trade_run_params[:selling_price]
c
TradeRun.find(params[:id])    
params
TradeRun.last
@trade_run
trade_run_params
c
@trade_session
params
c
ActionCable.server.broadcast("user_profits_channel", profits)
ActionCable.server.broadcast("user_profits", profits: profits)
ActionCable.server.broadcast 'user_profits_channel', profits: profits
Rails.logger.info "Broadcasted data: #{profits}"
MilkRun.group(:user_id).sum(:profit)
grouped_profits
c
current_milkrunc
current_milkrun
params[:username]
params[:milk_run]params[:username]
params[:milk_run]
param
params[:milk_run][:user_id]
User.search_by_username(params[:milk_run][:user_id]).first
c
user.id
user.idd
user
c
 User.search_by_username(params[:milk_run][:user_id]).first
user
c
User.last
user
c
user
c
user
c
user
c
updated_usernames
user
c
User.last
params[:username]
User.last
User.where('lower(username) = lower(?)', params[:username]).first
params[:username]
@user
c
@user
c
profit = sell_total - buy_total
buy_total
sell_total
params
c
current_milkrun
buy_commodity_scu
sell_total 
profit = sell_total - buy_total
buy_total = buy_commodity_scu * buy_commodity_price
buy_commodity_price
buy_total
sell_total
profit = sell_total - buy_total
buy_commodity_price = current_milkrun.buy_commodity_price
params
params[:milk_run][:buy_commodity_price]
buy_commodity_scu
buy_total = buy_commodity_scu * params[:milk_run][:buy_commodity_price].to_i
buy_commodity_scu = current_milkrun.buy_commodity_scu
current_milkrun.buy_commodity_scu
params
params[:milk_run][:buy_commodity_scu]
buy_total
sell_total
c
received_guid
@secretguid
c
ENV['STARBITIZEN_EXCHANGE']
@secretguid
c
User.where('lower(username) = lower(?)', player_name).first.id
User.find_by_username('lower(username) LIKE lower(?)', "%#{player_name}%")
User.find_by_username('lower(username) LIKE lower(?)', "%#{player_name}%").id
c
User.find_by_username(player_name).id
to_user.save!
to_user
to_user = User.where("lower(username) LIKE lower(?)", "%#{player_name.downcase}%").first_or_initiali
c
User.where("username LIKE ?", "%#{player_name}%").first_or_initialize
User.where("username LIKE ?", "%#{player_name}%").first
User.where("username LIKE ?", "%#{player_name}%")
User.where("lower(username) LIKE ?", "%#{player_name}%").
player_name
to_user
c
trade_runs
self
c
