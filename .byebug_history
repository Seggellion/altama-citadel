c
Task.last
@current_task
app1
task
task.view
c
@fullscreen_tasks
c
@fullscreen_tasks.first
fullscreen_tasks.first
c
event_users
c
EventShip.last
EventShip
EventShip.last
event_users
c
@event_ships.each(&:destroy)
c
EventShip.find(event_ships_ids).destroy
EventShip.find(event_ships_ids)
EventShip.find(event_ships_ids
EventShip.find(event_ships_ids).destroy_all
EventShip.find(event_ships_ids)
EventShip.where(event_ships_ids)
EventShip.find(event_ships_ids)
event_ships.delete_all
event_ships.delete
c
event_ships
c
event_ships.delete
event_ships.delete_all
event_ships.destroy
event_ships.destroy_all
event_ships =  event_ships << EventShip.find_by(event_id: eventuser.event_id)
event_ships << EventShip.find_by(event_id: eventuser.event_id)
event_ships >> EventShip.find_by(event_id: eventuser.event_id)
event_ships = []
event_ships.merge(EventShip.find_by(event_id: eventuser.event_id))
event_ships = {}
event_ships.merge(EventShip.find_by(event_id: eventuser.event_id))
event_ships = []
event_ships.merge(EventShip.find_by(event_id: eventuser.event_id))
c
event_ships
c
event_user
event_user.event_series_id.present?
event_user.must_join_all?
c
event.event_series
event
event_user.event.event_series
event_user.event
event_user.event.event_series
event_user.event_series
event_user
c
current_user
params
event_user
eventuser
event
self
event_user.event_series_id
c
event_ship.destroy
event_ship
c
current_event.event_series_id
event_series
c
current_event.id
EventSeries.find_by(event_id: current_event.id)
event_series.must_join_all
EventSeries.first
current_event
event_series
c
params[:event_series][:keyword_required]
params[:keyword_required][:keyword_required]
params
params[:keyword_required]
c
self.keyword_required
c
self.keyword_required
self
c
@event_user
c
@event_user.update(ship_fid: "test")
@event_user.update(ship_fid: usership.fid.to_s)
@event_user.update(ship_fid: usership.fid)!
@event_user.update(ship_fid: usership.fid)
usership.fid
@event_user
c
usership.fid
usership
@event_user.update(ship_fid: usership.fid)
@event_user.merge(ship_fid: usership.fid)
params
c
current_event.update(title:"notactually multi-event")
current_event
c
event
eventuser
event.usership
event.user_ship
event.usership
event
c
event.event_ships.first.usership.fid
event.event_ships.first.usership
event.event_ships.first
event.event_ships
event.event_ships.ships
event.event_ships.user_ship
event.event_ships.user_ships
event.event_ships.userships
event.event_ships.usership
event.event_ships
c
event.event_ships
event.event_ship
event.title
event
event.ship
event.usership
EventShip.last
Eventship.last
event.event_ships.first
event.event_ships
event.event_ship
event.eventship
event
c
event.ship
event
c
Event.find_by_id(event_user_params[:event_id])
Event.last
event_user_params[:event_id]
is_series
c
userships.select { |item| item.fid[0..1].to_s.include?(keyword)}
c
User.last.userships.where(show_information: true).last.fid[0..1]
User.last.userships.where(show_information: true).last.fid[0]
User.last.userships.where(show_information: true).last.fid[1]
User.last.userships.where(show_information: true).last.fid[2]
User.last.userships.where(show_information: true).last.fid[-1..0]
User.last.userships.where(show_information: true).last.fid[-1..]
User.last.userships.where(show_information: true).last
User.last.userships.where(show_information: true)
User.last.userships.first
User.last.userships.last
User.last.usership.last
User.last.ships.first
User.last.ships.last.fid
User.last.ships.last
User.last.ship
current_user.ship
Usership.last
User.last
Usership.first.fid[-1..0]
self
self.fid
self.fid[-1..0]
c
userships.select { |item| item.fid.to_s.include?(keyword)}
userships.select { |item| item.name.to_s.include?(keyword)}
userships =    Usership.where(user_id:user.id, show_information:true)
keyword
c
event.filteredFleet(current_user)
c
event.filteredFleet(current_user)
c
event.filteredFleet(current_user)
event.filteredFleet(current_user
keyword
c
event.filteredFleet(current_user).length
event.filteredFleet(current_user).count
event.filteredFleet(current_user)
event.filteredFleet(current_user).first
event.filteredFleet(current_user)
c
event
self
event.filteredFleet(current_user)
c
keyword
self
c
Event.last
self
keyword = self.keyword
params
self
current_user
c
@fid_01[-4..-1]
@fid = "GG1324"
@fid_01[-4..-1]
@fid_01[-n..-1]
@fid_01
fid_01
n
c
Ship.find_by_id(89)
Usership.find_by_id(64).ship
Usership.find_by_id(64)
Ship.first
Ship.where(model:"MPUV")
Usership.where(ship_name:"MPUV")
Usership.last
Usership.first
usership.last
self.ship.model.include?("Starfarer")
self.ship.model.includes?("Starfarer")
self.ship.model contains "Starfarer"
self.ship.model
self.ship
self
c
n
@usership
c
usership_params
usership_params = usership_params.merge(fid: usership.fid_processor(param_1,param_2))
usership_params.update(ship_name:'test')
usership_params
c
usership_params
c
usership_params = usership_params.merge(fid: usership.fid_processor(param_1,param_2))
usership_params.except(:fid_01, :fid_02)
usership_params
@usership
c
usership_params.except(:fid_01, :fid_02)
usership_params.except(:fid_01)
usership_params.exclude(:fid_01)
usership_params.exclude(fid_01)
usership_params
userrship_params
n
usership_params.merge(fid: usership.fid_processor(param_1,param_2))
usership_params
