c
percent_change = ((params[:milk_run][:sell_commodity_price].to_f - sell_commodity.buy) / sell_commodity.buy) * 100 
sell_commodity
sell_commodity.sell
percent_change.abs
c
current_milkrun.user_id
user
user_id
sell_commodity
c
percent_change.abs
out_of_family
c
trade_type
params[:milk_run]["#{type_reverse}_commodity_price"]
c
trade_type
params[:milk_run]["#{trade_type}_commodity_price"]
commodity
params
params[:milk_run]
params[:milk_run][:"sell_commodity_price"]
params[:milk_run]["sell_commodity_price"]
params
"#{trade_type}_commodity_price"
trade_type
params[:milk_run]["#{trade_type}_commodity_price"]
"#{trade_type}": params[:milk_run]["#{trade_type}_commodity_price"]
c
trade_type == "buy"
trade_type = "buy"
trade_type
c
CommodityStub.last
Commodity.last
percent_change.abs >= 5
percent_change
c
percent_change.abs >= 5
percent_change = ((params[:milk_run]["#{trade_type}_commodity_price"].to_f - commodity.sell) / commodity.sell) * 100
((params[:milk_run]["#{trade_type}_commodity_price"].to_f - commodity.sell) / commodity.sell) * 100
((params[:milk_run]["#{trade_type}_commodity_price"].to_f - commodity.sell) / commodity.sell)
c
params[:milk_run]["#{trade_type}_commodity_price"]
params[:milk_run][:sell_commodity_price].to_f
((params[:milk_run][:sell_commodity_price].to_f - commodity.sell) / commodity.sell) * 100
commodity
c
Commodity.find_by_id(13665)
MilkRun.last
commodity
commodity.send(trade_type)
params[:milk_run]["#{trade_type}_commodity_price"].to_f
percent_change.to_i
percent_change
c
params[:milk_run][:commodity_name]
Commodity.find_by_id(commodity_id)
commodity_id
"#{trade_type}_commodity_id"
Commodity.last
Commodity.where(location: params[:milk_run]["#{trade_type}_location"], "#{trade_type}": params[:milk_run]["#{trade_type}_commodity_price"])
Commodity.find_by(location: params[:milk_run]["#{trade_type}_location"], "#{trade_type}": params[:milk_run]["#{trade_type}_commodity_price"])
            MilkRun.create!(
                user_id: user.id, 
                usership_id: params[:milk_run][:trade_session_id], 
                trade_session_id: trade_session_id, 
                commodity_name: params[:milk_run][:commodity_name], 
                "#{trade_type}_commodity_id": commodity_id,
                "#{trade_type}_commodity_scu": params[:milk_run]["#{trade_type}_commodity_scu"],
                "#{trade_type}_commodity_price": params[:milk_run]["#{trade_type}_commodity_price"],
                "#{trade_type}_location": params[:milk_run]["#{trade_type}_location"],      
                max_scu: ship_scu, 
                used_scu:  used_scu,             
                updated_at: Time.now
            )
 "#{trade_type}_commodity_scu"
#{trade_type}_commodity_scu
Commodity.find_by(location: params[:milk_run]["#{trade_type}_location"], "#{trade_type}": params[:milk_run]["#{trade_type}_commodity_price"])
commodity
MilkRun.last
trade_type
commodity
((params[:milk_run]["#{trade_type}_commodity_price"].to_f - commodity.send(trade_type)) / commodity.send(trade_type)) * 100
percent_change
c
buy_commodity_id
trade_session_id
params
params[:milk_run][:ship_id]
Ship.find(params[:milk_run][:ship_id])&.scu
c
params
params[:milk_run][:user_id]
exit
c
location['refreshPerMinute']
location['refreshPerMinute'
max_inventory
REFRESH_PER_MINUTE_MAPPING[commodity['name']]
MAX_INVENTORY
c
JSON.parse(params[:milk_run][:sell_location])["name"].split(' |')[0]
JSON.parse(params[:milk_run][:sell_location])["name"].split('|')[0]
JSON.parse(params[:milk_run][:sell_location])["name"].split('|')
JSON.parse(params[:milk_run][:sell_location]).split('|')JSON.parse(params[:milk_run][:sell_location])["name"].split('|')
JSON.parse(params[:milk_run][:sell_location]).split('|')
JSON.parse(params[:milk_run][:sell_location])["name"]
JSON.parse(params[:milk_run][:sell_location])[0]["name"]
JSON.parse(params[:milk_run][:sell_location]).first["name"]
JSON.parse(params[:milk_run][:sell_location]).first[:name]
JSON.parse(params[:milk_run][:sell_location]).first.name
JSON.parse(params[:milk_run][:sell_location]).first
JSON.parse(params[:milk_run][:sell_location])[:name]
JSON.parse(params[:milk_run][:sell_location]).name
JSON.parse(params[:milk_run][:sell_location])[0]
JSON.parse(params[:milk_run][:sell_location])
c
params[:milk_run][:buy_location]
c
CommodityStub.all
c
Commodity.find_or_initialize_by(name: commodity['name'], location: location['name'], updated_at: location['timestamp'])
c
Commodity.find_or_initialize_by(name: commodity['name'], location: location['name'], timestamp: location['timestamp'])
c
existing_run
existing_run.created_at > (Time.now - 4.minutes)
Time.now - 4.minutes
existing_run.created_at > (Time.now - 4.minutes)
existing_run.created_at
c
buy_commodity.inventory
buy_commodity
c
StarBitizenRuns
StarBitizen
StarBitizenRun
records_exist
c
json_request
json_request["secretguid"]
c
ENV['STARBITIZEN_EXCHANGE']
exit
cc
c
cc
c
commodity
c
commodity
c
@secretguid
c
@secretguid
c
Transaction.last
Transaction.create(amount: star_bits, sender_id: from_user_id, receiver_id: to_user_id)
to_user_id
c
User.where("lower(username) LIKE lower(?)", "%#{player_name.downcase}%").first_or_initialize
User.where("lower(username) LIKE lower(?)", "%#{player_name.downcase}%")
player_name.downcase
to_user
c
User.last
to_user.new_record?
to_user
c
to_user = User.where("lower(username) LIKE lower(?)", "%#{player_name.downcase}%").first_or_initialize
player_name.downcase
username
User.where("lower(username) LIKE lower(?)", "%#{player_name.downcase}%").first_or_initialize
c
buy_commodity
buy_commodity.sell.to_i
sell_commodity.buy.to_i * actual_removed
capital
sell_commodity
sell_commodity.buy.to_i
actual_removed
profit
c
StarBitizenRun.create(commodity_id:buy_commodity.id, profit:total_profit, user_id: to_user_id, scu: actual_removed)
StarBitizenRun
c
StarBitizenRun
StarBitizenRun.create(commodity_id:buy_commodity.id, profit:total_profit, user_id: to_user_id, scu: actual_removed)
c
StarBitizenRun.create(commodity_id:buy_commodity.id, profit:total_profit, user_id: to_user_id, scu: actual_removed)
c
StarBitizenRun.create(commodity_id:buy_commodity.id, profit:total_profit, user_id: to_user_id, scu: actual_removed)
c
total_units.to_i
total_units
buy_commodity.maxInventory
buy_commodity.maxInventory.to_i
[buy_commodity.maxInventory.to_i, total_units].min
c
[buy_commodity.maxInventory, total_units].min
c
records_exist
c
buy_commodity.decrement(:inventory, total_units.to_i)
buy_commodity.inventory.decrement(:inventory, total_units.to_i)
total_units.to_i
buy_commodity.inventory
c
c'
player_name
c
to_location
total_units
c
new_inventory = [commodity.inventory + increase_amount, commodity.maxInventory].min
c
commodity
commodity.inventory
new_inventory = [commodity.inventory + increase_amount, commodity.maxInventory].min
commodity
commodity.refreshPerMinute
increase_amount
 c
commodity.refreshPerMinute
increase_amount
c
commodity.refreshPerMinute
ommodity.refreshPerMinute
commodity
INVENTORY_INCREASE
c
Task.last
c
TradeRun.last.owner
TradeRun.last.user
TradeRun.last
TradeRun.where(trade_session_id: trade_session_id).joins(:owner).group('users.username').sum(:profit)
TradeRun.where(trade_session_id: trade_session_id).joins(:user).group('users.username').sum(:profit)
Traderun.where(trade_session_id: trade_session_id).joins(:user).group('users.username').sum(:profit)
params[:trade_session_id]
c
params[:trade_session]
params
c
@commodity_buy_price = Commodity.find_by(location: params[:trade_run][:sell_location], name: @trade_run.commodity.name)
@trade_run.commodity.name
@traderun.commodity
@traderun.commodity.name
Commodity.last
params[:trade_run][:sell_location]
params[:trade_run]
Commodity
params
@trade_run
