c
StarBitizenRun.last
@twitch_channel
c
@buy_commodity.update(inventory:60)
@buy_commodity
c
@buy_commodity
@buy_commodity.update(inventory:12)
@buy_commodity
c
@buy_commodity
c
@buy_commodity.update(inventory:10)
@buy_commodity
c
@buy_commodity.inventory
c
@buy_commodity
c
StarBitizenRun.last
StarBitizenRun.find_by(user_id: to_user_id, twitch_channel: @twitch_channel, profit: 0)
        StarBitizenRun.find_by(user_id: to_user_id, twitch_channel: @twitch_channel, profit: 0)
@twitch_channel = @json_request["twitch_channel"].to_i
to_user_id = User.where("username ILIKE ?", player_name).first.id
 player_name = @json_request["player_name"]
find_current_run
@current_run
c
@current_run
c
@current_run
@sell_commodity
c
StarBitizenRun.find_by(user_id: to_user_id, twitch_channel: @twitch_channel, profit: 0)
@twitch_channel = @json_request["twitch_channel"].to_i
   79:         @twitch_channel = @json_request["twitch_channel"].to_i
 to_user_id = User.where("username ILIKE ?", player_name).first.id
player_name
c
@current_run
c
@current_run
c
fetch_or_create_user(player_name)
        @sell_commodity = Commodity.where(name: @commodity_name, location: to_location).where('buy > ?', 0).first
to_location
 @commodity_name
c
@sell_commodity
c
@sell_commodity
sell_commodity
@sell_commodity
@buy_commodity
c
processor
c
@to_user
@buy_commodity
c
 @to_user = fetch_or_create_user(player_name)
 @total_units = @json_request["total_units"].to_i
        @buy_commodity = Commodity.where(name: @commodity_name, location: from_location).where('sell > ?', 0).first
from_location = @trade_locations.search_for(from_location_string).first&.name
from_location_string = @json_request["from_location"]
@trade_locations.search_for(from_location_string).first&.name
from_location
@buy_commodity = Commodity.where(name: @commodity_name, location: from_location).where('sell > ?', 0).first
 @commodity_name = @json_request["commodity"]
@trade_locations.search_for(from_location_string).first&.name
 @trade_locations = Location.where(trade_terminal: true)
@trade_locations
@trade_locations.search_for(from_location_string).first&.name
 @json_request["from_location"]
@json_request["player_name"]
Location.where(trade_terminal: true)
@json_request["twitch_channel"]
@json_request["starbits"].to_i
@json_request["commodity"]
c
@trade_locations
@json_request["from_location"]
from_location
@commodity_name
@buy_commodity
c
@sell_commodity
@buy_commodity
c
@buy_commodity
setup_trade_variables
c
race_users_by_user = StarBitizenRaceUser.joins(:user).group('users.username')
StarBitizenRaceUser
race_users_by_user
ship_races_data
user_races_data
c
to_location
commodity_name
Commodity.where(active: true).search_by_exact_name(commodity_name)
Commodity.where(active: true).search_by_exact_name(commodity_name).search_by_location(to_location).first
Commodity.where(active: true).search_by_exact_name(commodity_name).search_by_location(to_location)
Commodity.where(active: true).search_by_exact_name(commodity_name)
c
commodity_name
to_location
sell_search_query
c
Event.last.update(start_date: "2953-01-21 09:00:00.000000000 +0000")
Event.last
Event.timeline_events(i)
Event.totalYears
Event.timeline_events(i)
Event.timeline_events(i).count
i
timeline_events(i)
event
c
Usership.find_by_id(self.usership_id)
c
Usership.find_by_id(self.usership_id).ship
find_by_id(self.usership_id).ship
self.usership_id
c
n
@aec
aec
n
(params[:rfa][:servicefee].to_f / 10.00).round(2)
Rfa.get_status(params[:rfa][:status_id].to_i)
c
ActionCable.server.broadcast('status_updates', { user_id: current_user.id, status: current_user.online_status, username: current_user.username })
c
ActionCable.server.broadcast('status_updates', { user_id: current_user.id, status: current_user.online_status, username: current_user.username })
c
ActionCable.server.broadcast('status_updates', { user_id: current_user.id, status: current_user.online_status, username: current_user.username })
c
ActionCable.server.broadcast('status_updates', { user_id: current_user.id, status: current_user.online_status, username: current_user.username })
=> 29:     ActionCable.server.broadcast('status_updates', { user_id: current_user.id, status: current_user.online_status, username: current_user.username })
c
ActionCable.server.broadcast('status_updates', { user_id: current_user.id, status: current_user.online_status, username: current_user.username })
c
ActionCable.server.broadcast('status_updates', { message: "Test message" })
c
user.online_status
user
c
current_user
@current_user
status
c
@current_user
current_user
params[:format]
params
c
User.last.email
User.last
user = where(username: auth.info.name).first
current_user
auth.info
c
ENV['DISCORD_CLIENT_ID']
exit
ENV['DISCORD_CLIENT_ID']
ENV['DISCORD_CLIENT_SECRET']
ENV['DISCORD_CLIENT_SECRET'],
ENV['DISCORD_CLIENT_ID']
c
@current_user
c
task
task.name
task.respond_to?(:name)
task
c
@twitch_id
c
@twitch_id 
@twitch_id
user
c
@trade_session_id
params
 existing_milkrun
create_milk_run_and_update_buy_commodity(user, ship_scu) unless existing_milkrun
ship_scu
user
c
receiver = User.find_by(asl_number: asl_number)
asl_number = params[:asl_number]
 User.find_by(asl_number: asl_number)
params
c
@current_user.messages
@current_user.messages.first
@current_user.first
Message.last
@current_user.messages
@curreent_user.messages
 @current_user.filtered_by_receiver(receiver.id)
receiver.id
@current_user.filtered_by_receiver(receiver.id)
receiver.id
receiver
@current_user.filtered_by_receiver(receiver.id).first
@current_user.filtered_by_receiver(receiver.id).count
c
@current_user.filtered_by_receiver(receiver.id).first.sender.username
@current_user.filtered_by_receiver(receiver.id).first.sender
message.sender.username
@current_user.filtered_by_receiver(receiver.id).first
c
@current_user.filtered_by_receiver(receiver.id)
c
messages
messages = self.messages.where(sender_id: receiver) + self.messages.where(receiver_id: receiver)
self.messages.where(sender_id: receiver) + self.messages.where(receiver_id: receiver)
self.messages.where(receiver_id: receiver)
receiver
self.messages.first
self.messages
c
receiver
self.messages.first
self.messages
self
Message.last
self.messages.where(sender_id: receiver)
receiver
c
task
c
receiver
c
receiver_id
@current_user.filtered_by_receiver(receiver_id)
@current_user.filtered_by_receiver(receiver_id).
c
task
receiver_id
@current_user.filtered_by_receiver(receiver_id)
c
message
message.save!
message.save
message
c
current_user
curreent_user
Message.last
params
c
receiver_id = task.split('|')[0].split('-').last
